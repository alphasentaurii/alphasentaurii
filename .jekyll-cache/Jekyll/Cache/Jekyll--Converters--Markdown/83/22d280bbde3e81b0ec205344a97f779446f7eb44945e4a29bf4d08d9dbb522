I"Ɛ<p>Configure <code class="language-plaintext highlighter-rouge">AWS Deep Learning</code> EC2 Container image for <code class="language-plaintext highlighter-rouge">TensorFlow</code> model training on a <code class="language-plaintext highlighter-rouge">CPU instance</code> with <code class="language-plaintext highlighter-rouge">Python 3.6</code> and run a machine learning model.</p>

<h1 id="iam-policy">IAM Policy</h1>
<p>Navigate to AWS IAM Console and select or create a user. Add the following permissions under <code class="language-plaintext highlighter-rouge">Attach Existing Policies Directly</code>:</p>
<ul>
  <li>ECS_FullAccess</li>
</ul>

<p>Add inline policy and save as <code class="language-plaintext highlighter-rouge">ECR</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
       </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
       </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
              </span><span class="p">{</span><span class="w">
                     </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ecr:*"</span><span class="p">,</span><span class="w">
                     </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
                     </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
              </span><span class="p">}</span><span class="w">
       </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="create-ec2-instance-on-aws-console">Create EC2 Instance on AWS console</h1>

<p>Navigate to EC2 console and launch an Amazon EC2 instance.</p>
<ul>
  <li>Select AWS Deep Learning Base AMI</li>
</ul>

<p>I use the Amazon Linux one here because I prefer Debian (it’s pretty much Amazon’s version of a Debian image) but you can also choose the Ubuntu version.</p>

<p>Select instance type:</p>
<ul>
  <li>c5.large</li>
</ul>

<p>Click <em>LAUNCH</em> !</p>

<p>Create or select a key pair. You can look up how to do this if you’re not sure…</p>

<p>Grab the public DNS (IPv4) from the instance you just created and ssh into it from your local machine:</p>

<h1 id="ssh-into-ec2-instance">SSH into EC2 Instance</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>STARFOX <span class="nv">$&gt;</span> ssh <span class="nt">-L</span> localhost:8888:localhost:8888 <span class="nt">-i</span> sophie_rsa ec2-user@ec2-3-236-65-85.compute-1.amazonaws.com

Enter passphrase <span class="k">for </span>key <span class="s1">'sophie_rsa'</span>: 
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">=============================================================================</span>
       __|  __|_  <span class="o">)</span>
       _|  <span class="o">(</span>     /   Deep Learning AMI <span class="o">(</span>Amazon Linux 2<span class="o">)</span> Version 32.0
      ___|<span class="se">\_</span>__|___|
<span class="o">=============================================================================</span>

Please use one of the following commands to start the required environment with the framework of your choice:
<span class="k">for </span>MXNet<span class="o">(</span>+Keras2<span class="o">)</span> with Python3 <span class="o">(</span>CUDA 10.1 and Intel MKL-DNN<span class="o">)</span> ____________________________________ <span class="nb">source </span>activate mxnet_p36
<span class="k">for </span>MXNet<span class="o">(</span>+Keras2<span class="o">)</span> with Python2 <span class="o">(</span>CUDA 10.1 and Intel MKL-DNN<span class="o">)</span> ____________________________________ <span class="nb">source </span>activate mxnet_p27
<span class="k">for </span>MXNet<span class="o">(</span>+AWS Neuron<span class="o">)</span> with Python3 ___________________________________________________ <span class="nb">source </span>activate aws_neuron_mxnet_p36
<span class="k">for </span>TensorFlow<span class="o">(</span>+Keras2<span class="o">)</span> with Python3 <span class="o">(</span>CUDA 10.0 and Intel MKL-DNN<span class="o">)</span> __________________________ <span class="nb">source </span>activate tensorflow_p36
<span class="k">for </span>TensorFlow<span class="o">(</span>+Keras2<span class="o">)</span> with Python2 <span class="o">(</span>CUDA 10.0 and Intel MKL-DNN<span class="o">)</span> __________________________ <span class="nb">source </span>activate tensorflow_p27
<span class="k">for </span>TensorFlow<span class="o">(</span>+AWS Neuron<span class="o">)</span> with Python3 _________________________________________ <span class="nb">source </span>activate aws_neuron_tensorflow_p36
<span class="k">for </span>TensorFlow 2<span class="o">(</span>+Keras2<span class="o">)</span> with Python3 <span class="o">(</span>CUDA 10.1 and Intel MKL-DNN<span class="o">)</span> _______________________ <span class="nb">source </span>activate tensorflow2_p36
<span class="k">for </span>TensorFlow 2<span class="o">(</span>+Keras2<span class="o">)</span> with Python2 <span class="o">(</span>CUDA 10.1 and Intel MKL-DNN<span class="o">)</span> _______________________ <span class="nb">source </span>activate tensorflow2_p27
<span class="k">for </span>TensorFlow 2.3 with Python3.7 <span class="o">(</span>CUDA 10.2 and Intel MKL-DNN<span class="o">)</span> _____________________ <span class="nb">source </span>activate tensorflow2_latest_p37
<span class="k">for </span>PyTorch 1.4 with Python3 <span class="o">(</span>CUDA 10.1 and Intel MKL<span class="o">)</span> _________________________________________ <span class="nb">source </span>activate pytorch_p36
<span class="k">for </span>PyTorch 1.4 with Python2 <span class="o">(</span>CUDA 10.1 and Intel MKL<span class="o">)</span> _________________________________________ <span class="nb">source </span>activate pytorch_p27
<span class="k">for </span>PyTorch 1.6 with Python3 <span class="o">(</span>CUDA 10.1 and Intel MKL<span class="o">)</span> ________________________________ <span class="nb">source </span>activate pytorch_latest_p36
<span class="k">for </span>PyTorch <span class="o">(</span>+AWS Neuron<span class="o">)</span> with Python3 ______________________________________________ <span class="nb">source </span>activate aws_neuron_pytorch_p36
<span class="k">for </span>Chainer with Python2 <span class="o">(</span>CUDA 10.0 and Intel iDeep<span class="o">)</span> ___________________________________________ <span class="nb">source </span>activate chainer_p27
<span class="k">for </span>Chainer with Python3 <span class="o">(</span>CUDA 10.0 and Intel iDeep<span class="o">)</span> ___________________________________________ <span class="nb">source </span>activate chainer_p36
<span class="k">for </span>base Python2 <span class="o">(</span>CUDA 10.0<span class="o">)</span> _______________________________________________________________________ <span class="nb">source </span>activate python2
<span class="k">for </span>base Python3 <span class="o">(</span>CUDA 10.0<span class="o">)</span> _______________________________________________________________________ <span class="nb">source </span>activate python3

To automatically activate base conda environment upon login, run: <span class="s1">'conda config --set auto_activate_base true'</span>
 
Official Conda User Guide: https://docs.conda.io/projects/conda/en/latest/user-guide/
AWS Deep Learning AMI Homepage: https://aws.amazon.com/machine-learning/amis/
Developer Guide and Release Notes: https://docs.aws.amazon.com/dlami/latest/devguide/what-is-dlami.html
Support: https://forums.aws.amazon.com/forum.jspa?forumID<span class="o">=</span>263
For a fully managed experience, check out Amazon SageMaker at https://aws.amazon.com/sagemaker
When using INF1 <span class="nb">type </span>instances, please update regularly using the instructions at: https://github.com/aws/aws-neuron-sdk/tree/master/release-notes
<span class="o">=============================================================================</span>

ec2-user ~<span class="nv">$ </span>
</code></pre></div></div>

<h1 id="login-to-amazon-ecr">Login to Amazon ECR</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ec2-user ~<span class="nv">$ </span><span class="si">$(</span>aws ecr get-login <span class="nt">--region</span> us-east-1 <span class="nt">--no-include-email</span> <span class="nt">--registry-ids</span> 763104351884<span class="si">)</span>

WARNING! Using <span class="nt">--password</span> via the CLI is insecure. Use <span class="nt">--password-stdin</span><span class="nb">.</span>
WARNING! Your password will be stored unencrypted <span class="k">in</span> /home/ec2-user/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

</code></pre></div></div>

<h1 id="run-tensorflow-training-on-cpu-instances-with-python-36">Run <code class="language-plaintext highlighter-rouge">TensorFlow</code> training on <code class="language-plaintext highlighter-rouge">CPU instances</code> with <code class="language-plaintext highlighter-rouge">Python 3.6</code>.</h1>

<p>We’ll run AWS Deep Learning Container images on your EC2 instance using the command below. This command will automatically pull the Deep Learning Container image if it doesn’t exist locally.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~<span class="nv">$ </span>docker run <span class="nt">-it</span> 763104351884.dkr.ecr.us-east-1.amazonaws.com/tensorflow-training:1.13-cpu-py36-ubuntu16.04

~<span class="nv">$ </span><span class="nb">source </span>activate tensorflow2_latest_p37

<span class="c"># For tensorflow 1:</span>
~<span class="nv">$ </span><span class="nb">source </span>activate tensorflow_p36
<span class="s2">"""
Installing collected packages: tensorflow
Successfully installed tensorflow-1.15.3
Installation complete.
"""</span>
</code></pre></div></div>

<h1 id="example--run-mnist-cnn-model">Example : Run MNIST CNN Model</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~<span class="nv">$ </span>git clone https://github.com/fchollet/keras.git

~<span class="nv">$ </span>python keras/examples/mnist_cnn.py

<span class="s2">"""
2020-08-09 06:19:25.692828: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.10.1
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
11493376/11490434 [==============================] - 0s 0us/step
x_train shape: (60000, 28, 28, 1)
60000 train samples
10000 test samples
2020-08-09 06:19:40.000744: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcuda.so.1
2020-08-09 06:19:40.516676: E tensorflow/stream_executor/cuda/cuda_driver.cc:314] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2020-08-09 06:19:40.516729: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (ip-172-31-79-109.ec2.internal): /proc/driver/nvidia/version does not exist
2020-08-09 06:19:40.517234: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2020-08-09 06:19:40.523521: I tensorflow/core/platform/profile_utils/cpu_utils.cc:104] CPU Frequency: 2999995000 Hz
2020-08-09 06:19:40.523688: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x56095e591280 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-08-09 06:19:40.523705: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-08-09 06:19:40.596967: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 188160000 exceeds 10% of free system memory.
"""</span>

Epoch 1/12
272/469 <span class="o">[================&gt;</span>.............] - ETA: 38s - loss: 2.2911 - accuracy: 0.1317

</code></pre></div></div>

<h1 id="terminate-all-your-resources">Terminate all your resources</h1>

<p>Terminate all the resources so you don’t get charged</p>

<p>On the Amazon EC2 Console, select Running Instances.
 Select the EC2 instance you created and choose Actions &gt; Instance State &gt; Terminate.
 c. Confirm termination
You will be asked to confirm your termination. Select Yes, Terminate.</p>

<p>Note: This process can take several seconds to complete. Once your instance has been terminated, the Instance State will change to terminated on your EC2 Console.</p>

<hr />

<h1 id="using-sagemaker">Using SAGEMAKER</h1>

<p>Create Sagemaker instance on AWS Console then open the Jupyter Notebook. Set to Conda/Python3.</p>

<h1 id="prepare-the-data">Prepare the Data</h1>
<p>Preprocess the data that you need to train your machine learning model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import libraries
</span><span class="kn">import</span> <span class="nn">boto3</span><span class="p">,</span> <span class="n">re</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">math</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">sagemaker</span><span class="p">,</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span>
<span class="kn">from</span> <span class="nn">sagemaker</span> <span class="kn">import</span> <span class="n">get_execution_role</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>                                
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>                               
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>                   
<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">Image</span>                 
<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span>               
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">gmtime</span><span class="p">,</span> <span class="n">strftime</span> 
</code></pre></div></div>

<h1 id="define-aws-environment-variables">Define AWS environment variables</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">role</span> <span class="o">=</span> <span class="n">get_execution_role</span><span class="p">()</span>
<span class="n">prefix</span> <span class="o">=</span> <span class="s">'sagemaker/DEMO-xgboost-dm'</span>
<span class="n">containers</span> <span class="o">=</span> <span class="p">{</span><span class="s">'us-west-2'</span><span class="p">:</span> <span class="s">'433757028032.dkr.ecr.us-west-2.amazonaws.com/xgboost:latest'</span><span class="p">,</span>
              <span class="s">'us-east-1'</span><span class="p">:</span> <span class="s">'811284229777.dkr.ecr.us-east-1.amazonaws.com/xgboost:latest'</span><span class="p">,</span>
              <span class="s">'us-east-2'</span><span class="p">:</span> <span class="s">'825641698319.dkr.ecr.us-east-2.amazonaws.com/xgboost:latest'</span><span class="p">,</span>
              <span class="s">'eu-west-1'</span><span class="p">:</span> <span class="s">'685385470294.dkr.ecr.eu-west-1.amazonaws.com/xgboost:latest'</span><span class="p">}</span> <span class="c1"># each region has its XGBoost container
</span><span class="n">my_region</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">Session</span><span class="p">().</span><span class="n">region_name</span> <span class="c1"># set the region of the instance
</span><span class="k">print</span><span class="p">(</span><span class="s">"Success - the MySageMakerInstance is in the "</span> <span class="o">+</span> <span class="n">my_region</span> <span class="o">+</span> <span class="s">" region. You will use the "</span> <span class="o">+</span> <span class="n">containers</span><span class="p">[</span><span class="n">my_region</span><span class="p">]</span> <span class="o">+</span> <span class="s">" container for your SageMaker endpoint."</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="create-bucket-from-notebookpython">Create bucket from Notebook/Python</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bucket_name</span> <span class="o">=</span> <span class="s">'mybucket'</span>
<span class="n">s3</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="n">resource</span><span class="p">(</span><span class="s">'s3'</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">my_region</span> <span class="o">==</span> <span class="s">'us-east-1'</span><span class="p">:</span>
        <span class="n">s3</span><span class="p">.</span><span class="n">create_bucket</span><span class="p">(</span><span class="n">Bucket</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">s3</span><span class="p">.</span><span class="n">create_bucket</span><span class="p">(</span><span class="n">Bucket</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">CreateBucketConfiguration</span><span class="o">=</span><span class="p">{</span> <span class="s">'LocationConstraint'</span><span class="p">:</span> <span class="n">my_region</span> <span class="p">})</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'S3 bucket created successfully'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'S3 error: '</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</code></pre></div></div>
<h1 id="download-data-to-instance-and-load-to-dataframe">Download data to instance and load to dataframe</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
  <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">urlretrieve</span> <span class="p">(</span><span class="s">"https://d1.awsstatic.com/tmt/build-train-deploy-machine-learning-model-sagemaker/bank_clean.27f01fbbdf43271788427f3682996ae29ceca05d.csv"</span><span class="p">,</span> <span class="s">"bank_clean.csv"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'Success: downloaded bank_clean.csv.'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'Data load error: '</span><span class="p">,</span><span class="n">e</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
  <span class="n">model_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'./bank_clean.csv'</span><span class="p">,</span><span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">'Success: Data loaded into dataframe.'</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Data load error: '</span><span class="p">,</span><span class="n">e</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="train-test-shuffle-split">Train Test Shuffle Split</h1>

<p>Shuffle the data and split it into training data and test data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_data</span><span class="p">,</span> <span class="n">test_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">model_data</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="n">frac</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">1729</span><span class="p">),</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="mf">0.7</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">model_data</span><span class="p">))])</span>
<span class="k">print</span><span class="p">(</span><span class="n">train_data</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">test_data</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="load-model">Load Model</h1>

<p>Need to reformat header and first column of training data from s3</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">train_data</span><span class="p">[</span><span class="s">'y_yes'</span><span class="p">],</span> <span class="n">train_data</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'y_no'</span><span class="p">,</span> <span class="s">'y_yes'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="n">to_csv</span><span class="p">(</span><span class="s">'train.csv'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">boto3</span><span class="p">.</span><span class="n">Session</span><span class="p">().</span><span class="n">resource</span><span class="p">(</span><span class="s">'s3'</span><span class="p">).</span><span class="n">Bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">).</span><span class="n">Object</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="s">'train/train.csv'</span><span class="p">)).</span><span class="n">upload_file</span><span class="p">(</span><span class="s">'train.csv'</span><span class="p">)</span>
<span class="n">s3_input_train</span> <span class="o">=</span> <span class="n">sagemaker</span><span class="p">.</span><span class="n">s3_input</span><span class="p">(</span><span class="n">s3_data</span><span class="o">=</span><span class="s">'s3://{}/{}/train'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">prefix</span><span class="p">),</span> <span class="n">content_type</span><span class="o">=</span><span class="s">'csv'</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="tune-parameters-gradient-optimization">Tune Parameters (Gradient Optimization)</h1>
<p>Using XGBoost estimator</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">sess</span> <span class="o">=</span> <span class="n">sagemaker</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
<span class="n">xgb</span> <span class="o">=</span> <span class="n">sagemaker</span><span class="p">.</span><span class="n">estimator</span><span class="p">.</span><span class="n">Estimator</span><span class="p">(</span><span class="n">containers</span><span class="p">[</span><span class="n">my_region</span><span class="p">],</span><span class="n">role</span><span class="p">,</span> <span class="n">train_instance_count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">train_instance_type</span><span class="o">=</span><span class="s">'ml.m4.xlarge'</span><span class="p">,</span><span class="n">output_path</span><span class="o">=</span><span class="s">'s3://{}/{}/output'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">prefix</span><span class="p">),</span><span class="n">sagemaker_session</span><span class="o">=</span><span class="n">sess</span><span class="p">)</span>
<span class="n">xgb</span><span class="p">.</span><span class="n">set_hyperparameters</span><span class="p">(</span><span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">eta</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span><span class="n">gamma</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span><span class="n">min_child_weight</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span><span class="n">subsample</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span><span class="n">silent</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">objective</span><span class="o">=</span><span class="s">'binary:logistic'</span><span class="p">,</span><span class="n">num_round</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="train-model">Train Model</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xgb</span><span class="p">.</span><span class="n">fit</span><span class="p">({</span><span class="s">'train'</span><span class="p">:</span> <span class="n">s3_input_train</span><span class="p">})</span>

<span class="n">Uploading</span> <span class="o">-</span> <span class="n">Uploading</span> <span class="n">generated</span> <span class="n">training</span> <span class="n">model</span>
<span class="n">Completed</span> <span class="o">-</span> <span class="n">Training</span> <span class="n">job</span> <span class="n">completed</span>
<span class="n">Billable</span> <span class="n">seconds</span><span class="p">:</span> <span class="mi">54</span>
</code></pre></div></div>

<h1 id="deploy-model">Deploy Model</h1>

<p>Deploy the model on a server and create an endpoint that you can access.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xgb_predictor</span> <span class="o">=</span> <span class="n">xgb</span><span class="p">.</span><span class="n">deploy</span><span class="p">(</span><span class="n">initial_instance_count</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">instance_type</span><span class="o">=</span><span class="s">'ml.m4.xlarge'</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="make-predictions">Make Predictions</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_data_array</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'y_no'</span><span class="p">,</span> <span class="s">'y_yes'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="n">values</span> <span class="c1">#load the data into an array
</span><span class="n">xgb_predictor</span><span class="p">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s">'text/csv'</span> <span class="c1"># set the data type for an inference
</span><span class="n">xgb_predictor</span><span class="p">.</span><span class="n">serializer</span> <span class="o">=</span> <span class="n">csv_serializer</span> <span class="c1"># set the serializer type
</span><span class="n">predictions</span> <span class="o">=</span> <span class="n">xgb_predictor</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">test_data_array</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="c1"># predict!
</span><span class="n">predictions_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">sep</span><span class="o">=</span><span class="s">','</span><span class="p">)</span> <span class="c1"># and turn the prediction into an array
</span><span class="k">print</span><span class="p">(</span><span class="n">predictions_array</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="evaluate-performance">Evaluate Performance</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cm</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">crosstab</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">test_data</span><span class="p">[</span><span class="s">'y_yes'</span><span class="p">],</span> <span class="n">columns</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">predictions_array</span><span class="p">),</span> <span class="n">rownames</span><span class="o">=</span><span class="p">[</span><span class="s">'Observed'</span><span class="p">],</span> <span class="n">colnames</span><span class="o">=</span><span class="p">[</span><span class="s">'Predicted'</span><span class="p">])</span>
<span class="n">tn</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span> <span class="n">tp</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">];</span> <span class="n">fp</span> <span class="o">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">];</span> <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">tp</span><span class="o">+</span><span class="n">tn</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">tp</span><span class="o">+</span><span class="n">tn</span><span class="o">+</span><span class="n">fp</span><span class="o">+</span><span class="n">fn</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span>
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">{0:&lt;20}{1:&lt;4.1f}%</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"Overall Classification Rate: "</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"{0:&lt;15}{1:&lt;15}{2:&gt;8}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"Predicted"</span><span class="p">,</span> <span class="s">"No Purchase"</span><span class="p">,</span> <span class="s">"Purchase"</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Observed"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"{0:&lt;15}{1:&lt;2.0f}% ({2:&lt;}){3:&gt;6.0f}% ({4:&lt;})"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"No Purchase"</span><span class="p">,</span> <span class="n">tn</span><span class="o">/</span><span class="p">(</span><span class="n">tn</span><span class="o">+</span><span class="n">fn</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="n">tn</span><span class="p">,</span> <span class="n">fp</span><span class="o">/</span><span class="p">(</span><span class="n">tp</span><span class="o">+</span><span class="n">fp</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="n">fp</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"{0:&lt;16}{1:&lt;1.0f}% ({2:&lt;}){3:&gt;7.0f}% ({4:&lt;}) </span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"Purchase"</span><span class="p">,</span> <span class="n">fn</span><span class="o">/</span><span class="p">(</span><span class="n">tn</span><span class="o">+</span><span class="n">fn</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="n">fn</span><span class="p">,</span> <span class="n">tp</span><span class="o">/</span><span class="p">(</span><span class="n">tp</span><span class="o">+</span><span class="n">fp</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="n">tp</span><span class="p">))</span>
</code></pre></div></div>

<h1 id="terminate-resources">Terminate Resources</h1>

<p>Delete endpoint, objects, bucket</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
sagemaker.Session<span class="o">()</span>.delete_endpoint<span class="o">(</span>xgb_predictor.endpoint<span class="o">)</span>
bucket_to_delete <span class="o">=</span> boto3.resource<span class="o">(</span><span class="s1">'s3'</span><span class="o">)</span>.Bucket<span class="o">(</span>bucket_name<span class="o">)</span>
bucket_to_delete.objects.all<span class="o">()</span>.delete<span class="o">()</span>

</code></pre></div></div>
:ET