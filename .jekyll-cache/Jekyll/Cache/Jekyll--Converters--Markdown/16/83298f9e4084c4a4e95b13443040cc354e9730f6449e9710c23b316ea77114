I"%F<h1 id="starskøpe"><code class="highlighter-rouge">STARSKØPE</code></h1>

<p><strong>Building a Cyberoptic Artificial Telescope for Astrophysical Object Classification</strong></p>

<p><img src="https://img.shields.io/github/repo-size/hakkeray/starskope" alt="GitHub repo size" />
<img src="https://img.shields.io/github/license/hakkeray/starskope?color=black" alt="GitHub license" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: this project is divided into 3 notebooks:

* starskøpe : Binary Classification of K2 Timeseries Photometry Data using a Convolutional Neural Network
* starskøpe-2:  Image Classification of Spectrographs using Keras CNN
* starskøpe-3: Stacking autoencoded RBMs into single robust Deep Boltzmann Machine
</code></pre></div></div>

<p><img src="https://github.com/hakkeray/starskope/blob/master/288_planetbleed1600.jpeg" alt="transiting-planet" />
source: NASA</p>

<h1 id="mission-brief">Mission Brief</h1>

<h2 id="abstract">ABSTRACT</h2>

<blockquote>
  <p>“Mathematicians […] are often led astray when ‘studying’ physics because they lose sight of the physics. 
They say: <em>‘Look, these differential equations–the Maxwell equations–are all there is to electrodynamics; it is admitted by the physicists that there is nothing which is not contained in the equations. The equations are complicated, but after all they are only mathematical equations and if I understand them mathematically inside out, I will understand the physics inside out.’</em> Only it doesn’t work that way. Mathematicians who study physics with that point of view–and there have been many of them–usually make little contribution to physics and, in fact, little to mathematics. They fail because the actual physical situations in the real world are so complicated that it is necessary to have a much broader understanding of the equations.”
<strong>-Richard Feynman, <em>The Feynman Lectures on Physics: Volume 2</em>, Chapter 2-1: “Differential Calculus of Vector Fields”</strong></p>
</blockquote>

<hr />

<p><strong>INTRODUCTION</strong>
One of the reasons I quote Mr. Feynman above is because I set out to work on this project with only one year of high school physics under my belt. Despite loving the subject and even getting an A- in that one class, for some reason I did not continue pursuing physics while in school. I bought the Feynman lectures a few years back (on a whim? who does that?) and as soon as I began preparing for this project I felt intuitively that it would be somewhat ridiculous for me to build neural networks for classifying astrophysical data if I didn’t fully grasp how and why the equations used to calculate my findings actually work.</p>

<p><strong>QUESTIONS</strong>
The specific questions this project seeks to answer are as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Can a transiting exoplanet be detected strictly by analyzing the raw flux values of a given star? 

2. What is the best approach for pre-processing photometric timeseries data and what are some of the issues we might encounter in choosing how the data is prepared for classification modeling?

3. How much signal-to-noise ratio is too much? That is, if the classes are highly imbalanced, for instance only a few planets can be confirmed out of thousands of stars, does the imbalance make for an unreliable or inaccurate model? 
4. How do we test and validate that?
</code></pre></div></div>

<p><strong>DATASET</strong>
To answer the above questions, I started the analysis with a small labeled timeseries dataset from Kaggle posted by NASA several years ago. The reason I chose this particular dataset is because in terms of the type of information we typically need to know in order to solve a physics problem – the primary one being UNITS, otherwise it’s a math problem! – this one is barren. The author who posted the dataset (<code class="highlighter-rouge">Winter Delta</code> or <code class="highlighter-rouge">W∆</code>) does however give us a few hints on how we <em>could</em> determine the units, and the dimensions, and a lot of other important physics-related information, if we do a little research. The biggest hint is that this dataset is from the K2 space telescope’s Campaign 3 observations in which only 42 confirmed exoplanets are detected in a set of over 5,000 stars. Looking at the dataset on its own (before doing any digging), we are given little information about how long the time period covers, and we know do not know what the time intervals between flux values are. So far, this has not stopped any data scientists from attempting to tackle the classification model without gathering any additional information.</p>

<p><strong>MODEL</strong>
To answer the question, I first set out to build a model for the data as is, “sans-physics”. The baseline model is a neural network using the Keras API in a sci-kit learn wrapper.</p>

<p><strong>RESULTS</strong>
I was able to identify with 99% accuracy the handful of stars (5) in the test dataset that have a confirmed exoplanet in their orbit.</p>

<p><strong>CONCLUSION</strong>
This baseline model is mathematically accurate, but it does not “understand physics”. The conclusion we need to make about the model is whether or not this lack of physics embedded in the training process (or even pre-training process) is acceptable or not.</p>

<p>While it is possible to create a 99% accurate machine learning model for detecting exoplanets using the raw flux values, without any sense of the actual time intervals, and with a highly imbalanced data set (imbalanced meaning only a few positive examples in a sea of negatives) - it is unclear that we can “get away with” this in every case. Furthermore, it is unlikely that could feel completely sure that we aren’t missing out on critical information - such as detecting the existence of an earth-like exoplanet transiting a star - if we don’t use our understanding of physics to further de-noise, normalize, and scale the data before training the model (and possibly even embed this into a pre-training phase). As a case in point, if you read any of the space telescope handbooks, you will quickly learn just how complex the instruments that are producng this data are, and that the way their technology works, when and where in the sky they were pointing, as well as what actually happened during their missions, you’d know that should all probably be taken into account in your model! The K2 data in particular, for instance, has a unique issue that every so often its thrusters would fire to adjust/maintain its position in the sky, causing data at multiple points to be completely useless.</p>

<p><em>Why that matters…</em>
This type of noise cannot be removed without knowing what exact times the thrusters fired, as well as what times each of the observations of the dataset occurred. Even if we do manage to throw the bad data out, we are still stuck with the problem of not having any data for that time period, and once again might miss our potential planet’s threshold crossing event! If we know where and when those missing pieces occur, we could use that to collect our missing data from another telescope like TESS, which has overlapping targets of observation. A model that can combine data from two different space telescopes, and be smart enough to know based on the telescope it came from how to handle the data, would make truly accurate predictions, and much more useful classifications.</p>

<p><em>What we can do about that…</em>
This is the type of model I will set out to build in my future work. This is what we would call a cyberoptic artificial telescope - one that can aggregate large datasets from multiple missions and give us a more accurate, more detailed picture of the stars and planets than what we have available to us in the limited view of a single picture from a single telescope at a single point in time. This is the vision for <em>STARSKØPE</em> which will come out of this project.</p>

<p><strong>RECOMMENDATIONS</strong>
My recommendations are the following:</p>

<ol>
  <li>
    <p>Use datasets from the MAST website (via API) to incorporate other calculations of the star’s properties as features to be used for classification algorithms. Furthermore, attempt other types of transformations and normalizations on the data before running the model - for instance, apply a Fourier transform.</p>
  </li>
  <li>
    <p>Combine data from multiple campaigns and perhaps even multiple telescopes (for instance, matching sky coordinates and time intervals between K2, Kepler, and TESS for a batch of stars that have overlapping observations - this would be critical for finding transit periods that are longer than the campaigns of a single telecope’s observation period).</p>
  </li>
  <li>
    <p>Explore using computer vision on not only the Full Frame images we can collect from telescopes like TESS, but also on spectographs of the flux values themselves. The beauty of machine learning is our ability to rely on the computer to pick up very small nuances in differences that we ourselves cannot see with our own eyes.</p>
  </li>
  <li>
    <p>Explore using autoencoded machine learning algorithms with Restricted Boltzmann Machines - this type of model has proven to be incredibly effective in the image analysis of handwriting as we’ve seen applied the MNIST dataset - let’s find out if the same is true for images of stars, be they the Full Frame Images or spectographs.</p>
  </li>
</ol>

<p><strong>FUTURE WORK</strong>
To continue this project, I’ll take another approach for detecting exoplanets using computer vision to analyze images of spectographs of this same star flux data set. Please go to the notebook <code class="highlighter-rouge">[starskøpe-2]</code> to see how I use a Restricted Boltzmann Machines neural network model to classify stars as exoplanet hosts using spectograph images of the flux values to find transiting exoplanets. Following this, I will apply the same algorithm to spectographs of Fourier transformed data, as you will see in <code class="highlighter-rouge">[starskøpe-3]</code>.</p>

<p>Additional future work following this project will be to develop my “cyberoptic artificial telescope” as a machine learning driven application that any astrophysicist can use to look at a single or collection of stars and have the model classify them according not only to exoplanet predictions, but also predict what type of star it is, and other key properties that would be of interest for astrophysical science applications.</p>

<h1 id="obtain">Obtain</h1>

<p>Begin by importing libraries and code packages for basic analysis, as well as the kaggle dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fsds_1007219  v0.7.20 loaded.  Read the docs: https://fsds.readthedocs.io/en/latest/ 
#!pip install fsds_100719
</span><span class="kn">import</span> <span class="nn">fsds_100719</span>
<span class="kn">from</span> <span class="nn">fsds_100719.imports</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fsds_1007219  v0.7.20 loaded.  Read the docs: https://fsds.readthedocs.io/en/latest/ 
</code></pre></div></div>

<html>
<style type="text/css">
</style><table id="T_56889908_8d6f_11ea_b585_14109fdfaded"><caption>Loaded Packages and Handles</caption><thead>    <tr>        <th class="col_heading level0 col0">Handle</th>        <th class="col_heading level0 col1">Package</th>        <th class="col_heading level0 col2">Description</th>    </tr></thead><tbody>
                <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow0_col0" class="data row0 col0">dp</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow0_col1" class="data row0 col1">IPython.display</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow0_col2" class="data row0 col2">Display modules with helpful display and clearing commands.</td>
            </tr>
            <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow1_col0" class="data row1 col0">fs</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow1_col1" class="data row1 col1">fsds_100719</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow1_col2" class="data row1 col2">Custom data science bootcamp student package</td>
            </tr>
            <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow2_col0" class="data row2 col0">mpl</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow2_col1" class="data row2 col1">matplotlib</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow2_col2" class="data row2 col2">Matplotlib's base OOP module with formatting artists</td>
            </tr>
            <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow3_col0" class="data row3 col0">plt</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow3_col1" class="data row3 col1">matplotlib.pyplot</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow3_col2" class="data row3 col2">Matplotlib's matlab-like plotting module</td>
            </tr>
            <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow4_col0" class="data row4 col0">np</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow4_col1" class="data row4 col1">numpy</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow4_col2" class="data row4 col2">scientific computing with Python</td>
            </tr>
            <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow5_col0" class="data row5 col0">pd</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow5_col1" class="data row5 col1">pandas</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow5_col2" class="data row5 col2">High performance data structures and tools</td>
            </tr>
            <tr>
                                <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow6_col0" class="data row6 col0">sns</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow6_col1" class="data row6 col1">seaborn</td>
                        <td id="T_56889908_8d6f_11ea_b585_14109fdfadedrow6_col2" class="data row6 col2">High-level data visualization library based on matplotlib</td>
            </tr>
    </tbody></table>
</html>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[i] Pandas .iplot() method activated.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import code packages and libraries
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">sklearn</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="n">sns</span><span class="p">.</span><span class="n">set_style</span><span class="p">(</span><span class="s">'whitegrid'</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'seaborn-bright'</span><span class="p">)</span>
 
<span class="n">font_dict</span><span class="o">=</span><span class="p">{</span><span class="s">'family'</span><span class="p">:</span><span class="s">'"Titillium Web", monospace'</span><span class="p">,</span><span class="s">'size'</span><span class="p">:</span><span class="mi">16</span><span class="p">}</span>
<span class="n">mpl</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'font'</span><span class="p">,</span><span class="o">**</span><span class="n">font_dict</span><span class="p">)</span>

<span class="c1">#ignore pink warnings
</span><span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">'ignore'</span><span class="p">)</span>
<span class="c1"># Allow for large # columns
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="c1"># pd.set_option('display.max_rows','')
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># uncomment if you need to install
# !pip install keras
# !pip install tensorflow
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># setting a random seed for reproducibility
</span><span class="kn">from</span> <span class="nn">numpy.random</span> <span class="kn">import</span> <span class="n">seed</span>
<span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">set_random_seed</span>
<span class="n">set_random_seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import additional libraries for keras
</span><span class="kn">import</span> <span class="nn">keras</span>
<span class="kn">from</span> <span class="nn">keras.utils.np_utils</span> <span class="kn">import</span> <span class="n">to_categorical</span>

<span class="c1"># from keras.preprocessing.text import Tokenizer
</span><span class="kn">from</span> <span class="nn">keras</span> <span class="kn">import</span> <span class="n">models</span><span class="p">,</span> <span class="n">layers</span><span class="p">,</span> <span class="n">optimizers</span>
<span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span><span class="p">,</span> <span class="n">Model</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Conv1D</span><span class="p">,</span> <span class="n">MaxPool1D</span><span class="p">,</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Flatten</span><span class="p">,</span> \
<span class="n">BatchNormalization</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">concatenate</span><span class="p">,</span> <span class="n">Activation</span>
<span class="kn">from</span> <span class="nn">keras.optimizers</span> <span class="kn">import</span> <span class="n">Adam</span>
<span class="kn">from</span> <span class="nn">keras.wrappers.scikit_learn</span> <span class="kn">import</span> <span class="n">KerasClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Using Theano backend.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Custom library of helper functions I created called "Spacekit"
</span><span class="kn">import</span> <span class="nn">spacekit</span>
<span class="kn">from</span> <span class="nn">spacekit</span> <span class="kn">import</span> <span class="n">analyzer</span><span class="p">,</span><span class="n">transformer</span><span class="p">,</span><span class="n">builder</span><span class="p">,</span><span class="n">computer</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">load_ext</span> <span class="n">autoreload</span>
<span class="o">%</span><span class="n">autoreload</span> <span class="mi">2</span>
</code></pre></div></div>

<p>Import dataset which has already been split into train and test sets, <code class="highlighter-rouge">exoTrain.csv.zip</code> and <code class="highlighter-rouge">exoTest.csv.zip</code> (I compressed them from their original csv format since the training set is &gt; 240 MB so we’ll to unzip them).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># SET DIRECTORY PATHS
</span><span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">glob</span><span class="p">,</span> <span class="n">sys</span>

<span class="n">HOME</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">curdir</span><span class="p">)</span>
<span class="n">DATA</span> <span class="o">=</span> <span class="n">HOME</span><span class="o">+</span><span class="s">'/DATA'</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># glob puts matching filenames into a list for us - handy for working with multiple datasets
</span><span class="n">files</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="n">glob</span><span class="p">(</span><span class="n">DATA</span><span class="o">+</span><span class="s">'/*.zip'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">DATA</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Uncomment to unzip 
# !unzip -q '{files[0]}'
# !unzip -q '{files[1]}'
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'exoTrain.csv'</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'exoTest.csv'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">HOME</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="scrub">Scrub</h1>

<p><strong>Initial inspection of data, reviewing the features, target (if any), datatypes, and checking for nulls.</strong></p>

<p>– What we are NOT going to scrub (in this version at least) –</p>

<p>Each star’s light frequency makes up a single row of data collected over the course of the campaign (#3), which in this case for K2 campaign 3 was a little over 60 days (campaigns are normally ~80 days but c3 ended early due to data storage capacity issues.</p>

<p>If we crunched the numbers (which I did elsewhere), it’s 29.4 minutes between each flux measurement, also known as the cadence. This matches the information available in the K2 handbook/MAST website/NASA. Knowing the units and time intervals would allow us to scale and normalize the data very methodically. However, since our initial (math-based) model doesn’t ‘care’ about units, the scrubbing will not take any of the physics into account. This is intentional.</p>

<p>This is something we DO want to come back to for comparison with future models that <em>will</em> have the astrophysical properties embedded in their pre-learning process, and in particular the SCRUBBING: remember, this is a <em>timeseries</em>…it’s hard to do any normalizing, scaling, de-noising to a timeseries if we don’t know anything about the time units. And that’s only ONE of the dimensions being completely ignored by our strict mathematical approach. The question is, will it matter?</p>

<h2 id="initial-inspection">Initial Inspection</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check the value counts 
</span><span class="n">display</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="s">'LABEL'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(),</span><span class="n">test</span><span class="p">[</span><span class="s">'LABEL'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1    5050
2      37
Name: LABEL, dtype: int64



1    565
2      5
Name: LABEL, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># comparing train and test datasets
</span><span class="n">display</span><span class="p">(</span><span class="n">train</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="n">test</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
</code></pre></div></div>

<html>
<body>
<div>

<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>LABEL</th>
      <th>FLUX.1</th>
      <th>FLUX.2</th>
      <th>FLUX.3</th>
      <th>FLUX.4</th>
      <th>FLUX.5</th>
      <th>FLUX.6</th>
      <th>FLUX.7</th>
      <th>FLUX.8</th>
      <th>FLUX.9</th>
      <th>FLUX.10</th>
      <th>FLUX.11</th>
      <th>FLUX.12</th>
      <th>FLUX.13</th>
      <th>FLUX.14</th>
      <th>FLUX.15</th>
      <th>FLUX.16</th>
      <th>FLUX.17</th>
      <th>FLUX.18</th>
      <th>FLUX.19</th>
      <th>FLUX.20</th>
      <th>FLUX.21</th>
      <th>FLUX.22</th>
      <th>FLUX.23</th>
      <th>FLUX.24</th>
      <th>FLUX.25</th>
      <th>FLUX.26</th>
      <th>FLUX.27</th>
      <th>FLUX.28</th>
      <th>FLUX.29</th>
      <th>FLUX.30</th>
      <th>FLUX.31</th>
      <th>FLUX.32</th>
      <th>FLUX.33</th>
      <th>FLUX.34</th>
      <th>FLUX.35</th>
      <th>FLUX.36</th>
      <th>FLUX.37</th>
      <th>FLUX.38</th>
      <th>FLUX.39</th>
      <th>FLUX.40</th>
      <th>...</th>
      <th>FLUX.3157</th>
      <th>FLUX.3158</th>
      <th>FLUX.3159</th>
      <th>FLUX.3160</th>
      <th>FLUX.3161</th>
      <th>FLUX.3162</th>
      <th>FLUX.3163</th>
      <th>FLUX.3164</th>
      <th>FLUX.3165</th>
      <th>FLUX.3166</th>
      <th>FLUX.3167</th>
      <th>FLUX.3168</th>
      <th>FLUX.3169</th>
      <th>FLUX.3170</th>
      <th>FLUX.3171</th>
      <th>FLUX.3172</th>
      <th>FLUX.3173</th>
      <th>FLUX.3174</th>
      <th>FLUX.3175</th>
      <th>FLUX.3176</th>
      <th>FLUX.3177</th>
      <th>FLUX.3178</th>
      <th>FLUX.3179</th>
      <th>FLUX.3180</th>
      <th>FLUX.3181</th>
      <th>FLUX.3182</th>
      <th>FLUX.3183</th>
      <th>FLUX.3184</th>
      <th>FLUX.3185</th>
      <th>FLUX.3186</th>
      <th>FLUX.3187</th>
      <th>FLUX.3188</th>
      <th>FLUX.3189</th>
      <th>FLUX.3190</th>
      <th>FLUX.3191</th>
      <th>FLUX.3192</th>
      <th>FLUX.3193</th>
      <th>FLUX.3194</th>
      <th>FLUX.3195</th>
      <th>FLUX.3196</th>
      <th>FLUX.3197</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>2</td>
      <td>93.85</td>
      <td>83.81</td>
      <td>20.10</td>
      <td>-26.98</td>
      <td>-39.56</td>
      <td>-124.71</td>
      <td>-135.18</td>
      <td>-96.27</td>
      <td>-79.89</td>
      <td>-160.17</td>
      <td>-207.47</td>
      <td>-154.88</td>
      <td>-173.71</td>
      <td>-146.56</td>
      <td>-120.26</td>
      <td>-102.85</td>
      <td>-98.71</td>
      <td>-48.42</td>
      <td>-86.57</td>
      <td>-0.84</td>
      <td>-25.85</td>
      <td>-67.39</td>
      <td>-36.55</td>
      <td>-87.01</td>
      <td>-97.72</td>
      <td>-131.59</td>
      <td>-134.80</td>
      <td>-186.97</td>
      <td>-244.32</td>
      <td>-225.76</td>
      <td>-229.60</td>
      <td>-253.48</td>
      <td>-145.74</td>
      <td>-145.74</td>
      <td>30.47</td>
      <td>-173.39</td>
      <td>-187.56</td>
      <td>-192.88</td>
      <td>-182.76</td>
      <td>-195.99</td>
      <td>...</td>
      <td>-317.51</td>
      <td>-167.69</td>
      <td>-56.86</td>
      <td>7.56</td>
      <td>37.40</td>
      <td>-81.13</td>
      <td>-20.10</td>
      <td>-30.34</td>
      <td>-320.48</td>
      <td>-320.48</td>
      <td>-287.72</td>
      <td>-351.25</td>
      <td>-70.07</td>
      <td>-194.34</td>
      <td>-106.47</td>
      <td>-14.80</td>
      <td>63.13</td>
      <td>130.03</td>
      <td>76.43</td>
      <td>131.90</td>
      <td>-193.16</td>
      <td>-193.16</td>
      <td>-89.26</td>
      <td>-17.56</td>
      <td>-17.31</td>
      <td>125.62</td>
      <td>68.87</td>
      <td>100.01</td>
      <td>-9.60</td>
      <td>-25.39</td>
      <td>-16.51</td>
      <td>-78.07</td>
      <td>-102.15</td>
      <td>-102.15</td>
      <td>25.13</td>
      <td>48.57</td>
      <td>92.54</td>
      <td>39.32</td>
      <td>61.42</td>
      <td>5.08</td>
      <td>-39.54</td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>-38.88</td>
      <td>-33.83</td>
      <td>-58.54</td>
      <td>-40.09</td>
      <td>-79.31</td>
      <td>-72.81</td>
      <td>-86.55</td>
      <td>-85.33</td>
      <td>-83.97</td>
      <td>-73.38</td>
      <td>-86.51</td>
      <td>-74.97</td>
      <td>-73.15</td>
      <td>-86.13</td>
      <td>-76.57</td>
      <td>-61.27</td>
      <td>-37.23</td>
      <td>-48.53</td>
      <td>-30.96</td>
      <td>-8.14</td>
      <td>-5.54</td>
      <td>15.79</td>
      <td>45.71</td>
      <td>10.61</td>
      <td>40.66</td>
      <td>16.70</td>
      <td>15.18</td>
      <td>11.98</td>
      <td>-203.70</td>
      <td>19.13</td>
      <td>19.13</td>
      <td>19.13</td>
      <td>19.13</td>
      <td>19.13</td>
      <td>17.02</td>
      <td>-8.50</td>
      <td>-13.87</td>
      <td>-29.10</td>
      <td>-34.29</td>
      <td>-24.68</td>
      <td>...</td>
      <td>-32.14</td>
      <td>-36.75</td>
      <td>-15.49</td>
      <td>-13.24</td>
      <td>20.46</td>
      <td>-1.47</td>
      <td>-0.40</td>
      <td>27.80</td>
      <td>-58.20</td>
      <td>-58.20</td>
      <td>-72.04</td>
      <td>-58.01</td>
      <td>-30.92</td>
      <td>-13.42</td>
      <td>-13.98</td>
      <td>-5.43</td>
      <td>8.71</td>
      <td>1.80</td>
      <td>36.59</td>
      <td>-9.80</td>
      <td>-19.53</td>
      <td>-19.53</td>
      <td>-24.32</td>
      <td>-23.88</td>
      <td>-33.07</td>
      <td>-9.03</td>
      <td>3.75</td>
      <td>11.61</td>
      <td>-12.66</td>
      <td>-5.69</td>
      <td>12.53</td>
      <td>-3.28</td>
      <td>-32.21</td>
      <td>-32.21</td>
      <td>-24.89</td>
      <td>-4.86</td>
      <td>0.76</td>
      <td>-11.70</td>
      <td>6.46</td>
      <td>16.00</td>
      <td>19.93</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2</td>
      <td>532.64</td>
      <td>535.92</td>
      <td>513.73</td>
      <td>496.92</td>
      <td>456.45</td>
      <td>466.00</td>
      <td>464.50</td>
      <td>486.39</td>
      <td>436.56</td>
      <td>484.39</td>
      <td>469.66</td>
      <td>462.30</td>
      <td>492.23</td>
      <td>441.20</td>
      <td>483.17</td>
      <td>481.28</td>
      <td>535.31</td>
      <td>554.34</td>
      <td>562.80</td>
      <td>540.14</td>
      <td>576.34</td>
      <td>551.67</td>
      <td>556.69</td>
      <td>550.86</td>
      <td>577.33</td>
      <td>562.08</td>
      <td>577.97</td>
      <td>530.67</td>
      <td>553.27</td>
      <td>538.33</td>
      <td>527.17</td>
      <td>532.50</td>
      <td>273.66</td>
      <td>273.66</td>
      <td>292.39</td>
      <td>298.44</td>
      <td>252.64</td>
      <td>233.58</td>
      <td>171.41</td>
      <td>224.02</td>
      <td>...</td>
      <td>-56.38</td>
      <td>-51.09</td>
      <td>-33.30</td>
      <td>-61.53</td>
      <td>-89.61</td>
      <td>-69.17</td>
      <td>-86.47</td>
      <td>-140.91</td>
      <td>-84.20</td>
      <td>-84.20</td>
      <td>-89.09</td>
      <td>-55.44</td>
      <td>-61.05</td>
      <td>-29.17</td>
      <td>-63.80</td>
      <td>-57.61</td>
      <td>2.70</td>
      <td>-31.25</td>
      <td>-47.09</td>
      <td>-6.53</td>
      <td>14.00</td>
      <td>14.00</td>
      <td>-25.05</td>
      <td>-34.98</td>
      <td>-32.08</td>
      <td>-17.06</td>
      <td>-27.77</td>
      <td>7.86</td>
      <td>-70.77</td>
      <td>-64.44</td>
      <td>-83.83</td>
      <td>-71.69</td>
      <td>13.31</td>
      <td>13.31</td>
      <td>-29.89</td>
      <td>-20.88</td>
      <td>5.06</td>
      <td>-11.80</td>
      <td>-28.91</td>
      <td>-70.02</td>
      <td>-96.67</td>
    </tr>
    <tr>
      <td>3</td>
      <td>2</td>
      <td>326.52</td>
      <td>347.39</td>
      <td>302.35</td>
      <td>298.13</td>
      <td>317.74</td>
      <td>312.70</td>
      <td>322.33</td>
      <td>311.31</td>
      <td>312.42</td>
      <td>323.33</td>
      <td>311.14</td>
      <td>326.19</td>
      <td>313.11</td>
      <td>313.89</td>
      <td>317.96</td>
      <td>330.92</td>
      <td>341.10</td>
      <td>360.58</td>
      <td>370.29</td>
      <td>369.71</td>
      <td>339.00</td>
      <td>336.24</td>
      <td>319.31</td>
      <td>321.56</td>
      <td>308.02</td>
      <td>296.82</td>
      <td>279.34</td>
      <td>275.78</td>
      <td>289.67</td>
      <td>281.33</td>
      <td>285.37</td>
      <td>281.87</td>
      <td>88.75</td>
      <td>88.75</td>
      <td>67.71</td>
      <td>74.46</td>
      <td>69.34</td>
      <td>76.51</td>
      <td>80.26</td>
      <td>70.31</td>
      <td>...</td>
      <td>-32.40</td>
      <td>-2.75</td>
      <td>14.29</td>
      <td>-14.18</td>
      <td>-25.14</td>
      <td>-13.43</td>
      <td>-14.74</td>
      <td>2.24</td>
      <td>-31.07</td>
      <td>-31.07</td>
      <td>-50.27</td>
      <td>-39.22</td>
      <td>-51.33</td>
      <td>-18.53</td>
      <td>-1.99</td>
      <td>10.43</td>
      <td>-1.97</td>
      <td>-15.32</td>
      <td>-23.38</td>
      <td>-27.71</td>
      <td>-36.12</td>
      <td>-36.12</td>
      <td>-15.65</td>
      <td>6.63</td>
      <td>10.66</td>
      <td>-8.57</td>
      <td>-8.29</td>
      <td>-21.90</td>
      <td>-25.80</td>
      <td>-29.86</td>
      <td>7.42</td>
      <td>5.71</td>
      <td>-3.73</td>
      <td>-3.73</td>
      <td>30.05</td>
      <td>20.03</td>
      <td>-12.67</td>
      <td>-8.77</td>
      <td>-17.31</td>
      <td>-17.35</td>
      <td>13.98</td>
    </tr>
    <tr>
      <td>4</td>
      <td>2</td>
      <td>-1107.21</td>
      <td>-1112.59</td>
      <td>-1118.95</td>
      <td>-1095.10</td>
      <td>-1057.55</td>
      <td>-1034.48</td>
      <td>-998.34</td>
      <td>-1022.71</td>
      <td>-989.57</td>
      <td>-970.88</td>
      <td>-933.30</td>
      <td>-889.49</td>
      <td>-888.66</td>
      <td>-853.95</td>
      <td>-800.91</td>
      <td>-754.48</td>
      <td>-717.24</td>
      <td>-649.34</td>
      <td>-605.71</td>
      <td>-575.62</td>
      <td>-526.37</td>
      <td>-490.12</td>
      <td>-458.73</td>
      <td>-447.76</td>
      <td>-419.54</td>
      <td>-410.76</td>
      <td>-404.10</td>
      <td>-425.38</td>
      <td>-397.29</td>
      <td>-412.73</td>
      <td>-446.49</td>
      <td>-413.46</td>
      <td>-1006.21</td>
      <td>-1006.21</td>
      <td>-973.29</td>
      <td>-986.01</td>
      <td>-975.88</td>
      <td>-982.20</td>
      <td>-953.73</td>
      <td>-964.35</td>
      <td>...</td>
      <td>-732.66</td>
      <td>-694.76</td>
      <td>-705.01</td>
      <td>-625.24</td>
      <td>-604.16</td>
      <td>-668.26</td>
      <td>-742.18</td>
      <td>-820.55</td>
      <td>-874.76</td>
      <td>-874.76</td>
      <td>-853.68</td>
      <td>-808.62</td>
      <td>-777.88</td>
      <td>-712.62</td>
      <td>-694.01</td>
      <td>-655.74</td>
      <td>-599.74</td>
      <td>-617.30</td>
      <td>-602.98</td>
      <td>-539.29</td>
      <td>-672.71</td>
      <td>-672.71</td>
      <td>-594.49</td>
      <td>-597.60</td>
      <td>-560.77</td>
      <td>-501.95</td>
      <td>-461.62</td>
      <td>-468.59</td>
      <td>-513.24</td>
      <td>-504.70</td>
      <td>-521.95</td>
      <td>-594.37</td>
      <td>-401.66</td>
      <td>-401.66</td>
      <td>-357.24</td>
      <td>-443.76</td>
      <td>-438.54</td>
      <td>-399.71</td>
      <td>-384.65</td>
      <td>-411.79</td>
      <td>-510.54</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 3198 columns</p>
</div>



<div>

<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>LABEL</th>
      <th>FLUX.1</th>
      <th>FLUX.2</th>
      <th>FLUX.3</th>
      <th>FLUX.4</th>
      <th>FLUX.5</th>
      <th>FLUX.6</th>
      <th>FLUX.7</th>
      <th>FLUX.8</th>
      <th>FLUX.9</th>
      <th>FLUX.10</th>
      <th>FLUX.11</th>
      <th>FLUX.12</th>
      <th>FLUX.13</th>
      <th>FLUX.14</th>
      <th>FLUX.15</th>
      <th>FLUX.16</th>
      <th>FLUX.17</th>
      <th>FLUX.18</th>
      <th>FLUX.19</th>
      <th>FLUX.20</th>
      <th>FLUX.21</th>
      <th>FLUX.22</th>
      <th>FLUX.23</th>
      <th>FLUX.24</th>
      <th>FLUX.25</th>
      <th>FLUX.26</th>
      <th>FLUX.27</th>
      <th>FLUX.28</th>
      <th>FLUX.29</th>
      <th>FLUX.30</th>
      <th>FLUX.31</th>
      <th>FLUX.32</th>
      <th>FLUX.33</th>
      <th>FLUX.34</th>
      <th>FLUX.35</th>
      <th>FLUX.36</th>
      <th>FLUX.37</th>
      <th>FLUX.38</th>
      <th>FLUX.39</th>
      <th>FLUX.40</th>
      <th>...</th>
      <th>FLUX.3157</th>
      <th>FLUX.3158</th>
      <th>FLUX.3159</th>
      <th>FLUX.3160</th>
      <th>FLUX.3161</th>
      <th>FLUX.3162</th>
      <th>FLUX.3163</th>
      <th>FLUX.3164</th>
      <th>FLUX.3165</th>
      <th>FLUX.3166</th>
      <th>FLUX.3167</th>
      <th>FLUX.3168</th>
      <th>FLUX.3169</th>
      <th>FLUX.3170</th>
      <th>FLUX.3171</th>
      <th>FLUX.3172</th>
      <th>FLUX.3173</th>
      <th>FLUX.3174</th>
      <th>FLUX.3175</th>
      <th>FLUX.3176</th>
      <th>FLUX.3177</th>
      <th>FLUX.3178</th>
      <th>FLUX.3179</th>
      <th>FLUX.3180</th>
      <th>FLUX.3181</th>
      <th>FLUX.3182</th>
      <th>FLUX.3183</th>
      <th>FLUX.3184</th>
      <th>FLUX.3185</th>
      <th>FLUX.3186</th>
      <th>FLUX.3187</th>
      <th>FLUX.3188</th>
      <th>FLUX.3189</th>
      <th>FLUX.3190</th>
      <th>FLUX.3191</th>
      <th>FLUX.3192</th>
      <th>FLUX.3193</th>
      <th>FLUX.3194</th>
      <th>FLUX.3195</th>
      <th>FLUX.3196</th>
      <th>FLUX.3197</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>2</td>
      <td>119.88</td>
      <td>100.21</td>
      <td>86.46</td>
      <td>48.68</td>
      <td>46.12</td>
      <td>39.39</td>
      <td>18.57</td>
      <td>6.98</td>
      <td>6.63</td>
      <td>-21.97</td>
      <td>-23.17</td>
      <td>-29.26</td>
      <td>-33.99</td>
      <td>-6.25</td>
      <td>-28.12</td>
      <td>-27.24</td>
      <td>-32.28</td>
      <td>-12.29</td>
      <td>-16.57</td>
      <td>-23.86</td>
      <td>-5.69</td>
      <td>9.24</td>
      <td>35.52</td>
      <td>81.20</td>
      <td>116.49</td>
      <td>133.99</td>
      <td>148.97</td>
      <td>174.15</td>
      <td>187.77</td>
      <td>215.30</td>
      <td>246.80</td>
      <td>-56.68</td>
      <td>-56.68</td>
      <td>-56.68</td>
      <td>-52.05</td>
      <td>-31.52</td>
      <td>-31.15</td>
      <td>-48.53</td>
      <td>-38.93</td>
      <td>-26.06</td>
      <td>...</td>
      <td>6.49</td>
      <td>-2.55</td>
      <td>12.26</td>
      <td>-7.06</td>
      <td>-23.53</td>
      <td>2.54</td>
      <td>30.21</td>
      <td>38.87</td>
      <td>-22.86</td>
      <td>-22.86</td>
      <td>-4.37</td>
      <td>2.27</td>
      <td>-16.27</td>
      <td>-30.84</td>
      <td>-7.21</td>
      <td>-4.27</td>
      <td>13.60</td>
      <td>15.62</td>
      <td>31.96</td>
      <td>49.89</td>
      <td>86.93</td>
      <td>86.93</td>
      <td>42.99</td>
      <td>48.76</td>
      <td>22.82</td>
      <td>32.79</td>
      <td>30.76</td>
      <td>14.55</td>
      <td>10.92</td>
      <td>22.68</td>
      <td>5.91</td>
      <td>14.52</td>
      <td>19.29</td>
      <td>14.44</td>
      <td>-1.62</td>
      <td>13.33</td>
      <td>45.50</td>
      <td>31.93</td>
      <td>35.78</td>
      <td>269.43</td>
      <td>57.72</td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>5736.59</td>
      <td>5699.98</td>
      <td>5717.16</td>
      <td>5692.73</td>
      <td>5663.83</td>
      <td>5631.16</td>
      <td>5626.39</td>
      <td>5569.47</td>
      <td>5550.44</td>
      <td>5458.80</td>
      <td>5329.39</td>
      <td>5191.38</td>
      <td>5031.39</td>
      <td>4769.89</td>
      <td>4419.66</td>
      <td>4218.92</td>
      <td>3924.73</td>
      <td>3605.30</td>
      <td>3326.55</td>
      <td>3021.20</td>
      <td>2800.61</td>
      <td>2474.48</td>
      <td>2258.33</td>
      <td>1951.69</td>
      <td>1749.86</td>
      <td>1585.38</td>
      <td>1575.48</td>
      <td>1568.41</td>
      <td>1661.08</td>
      <td>1977.33</td>
      <td>2425.62</td>
      <td>2889.61</td>
      <td>3847.64</td>
      <td>3847.64</td>
      <td>3741.20</td>
      <td>3453.47</td>
      <td>3202.61</td>
      <td>2923.73</td>
      <td>2694.84</td>
      <td>2474.22</td>
      <td>...</td>
      <td>-216.31</td>
      <td>-3470.75</td>
      <td>-4510.72</td>
      <td>-5013.41</td>
      <td>-3636.05</td>
      <td>-2324.27</td>
      <td>-2688.55</td>
      <td>-2813.66</td>
      <td>-586.22</td>
      <td>-586.22</td>
      <td>-756.80</td>
      <td>-1090.23</td>
      <td>-1388.61</td>
      <td>-1745.36</td>
      <td>-2015.28</td>
      <td>-2359.06</td>
      <td>-2516.66</td>
      <td>-2699.31</td>
      <td>-2777.55</td>
      <td>-2732.97</td>
      <td>1167.39</td>
      <td>1167.39</td>
      <td>1368.89</td>
      <td>1434.80</td>
      <td>1360.75</td>
      <td>1148.44</td>
      <td>1117.67</td>
      <td>714.86</td>
      <td>419.02</td>
      <td>57.06</td>
      <td>-175.66</td>
      <td>-581.91</td>
      <td>-984.09</td>
      <td>-1230.89</td>
      <td>-1600.45</td>
      <td>-1824.53</td>
      <td>-2061.17</td>
      <td>-2265.98</td>
      <td>-2366.19</td>
      <td>-2294.86</td>
      <td>-2034.72</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2</td>
      <td>844.48</td>
      <td>817.49</td>
      <td>770.07</td>
      <td>675.01</td>
      <td>605.52</td>
      <td>499.45</td>
      <td>440.77</td>
      <td>362.95</td>
      <td>207.27</td>
      <td>150.46</td>
      <td>85.49</td>
      <td>-20.12</td>
      <td>-35.88</td>
      <td>-65.59</td>
      <td>-15.12</td>
      <td>16.60</td>
      <td>-25.70</td>
      <td>61.88</td>
      <td>53.18</td>
      <td>64.32</td>
      <td>72.38</td>
      <td>100.35</td>
      <td>67.26</td>
      <td>14.71</td>
      <td>-16.41</td>
      <td>-147.46</td>
      <td>-231.27</td>
      <td>-320.29</td>
      <td>-407.82</td>
      <td>-450.48</td>
      <td>-146.99</td>
      <td>-146.99</td>
      <td>-146.99</td>
      <td>-146.99</td>
      <td>-166.30</td>
      <td>-139.90</td>
      <td>-96.41</td>
      <td>-23.49</td>
      <td>13.59</td>
      <td>67.59</td>
      <td>...</td>
      <td>-129.34</td>
      <td>-35.24</td>
      <td>-70.13</td>
      <td>-35.30</td>
      <td>-56.48</td>
      <td>-74.60</td>
      <td>-115.18</td>
      <td>-8.91</td>
      <td>-37.59</td>
      <td>-37.59</td>
      <td>-37.43</td>
      <td>-104.23</td>
      <td>-101.45</td>
      <td>-107.35</td>
      <td>-109.82</td>
      <td>-126.27</td>
      <td>-170.32</td>
      <td>-117.85</td>
      <td>-32.30</td>
      <td>-70.18</td>
      <td>314.29</td>
      <td>314.29</td>
      <td>314.29</td>
      <td>149.71</td>
      <td>54.60</td>
      <td>12.60</td>
      <td>-133.68</td>
      <td>-78.16</td>
      <td>-52.30</td>
      <td>-8.55</td>
      <td>-19.73</td>
      <td>17.82</td>
      <td>-51.66</td>
      <td>-48.29</td>
      <td>-59.99</td>
      <td>-82.10</td>
      <td>-174.54</td>
      <td>-95.23</td>
      <td>-162.68</td>
      <td>-36.79</td>
      <td>30.63</td>
    </tr>
    <tr>
      <td>3</td>
      <td>2</td>
      <td>-826.00</td>
      <td>-827.31</td>
      <td>-846.12</td>
      <td>-836.03</td>
      <td>-745.50</td>
      <td>-784.69</td>
      <td>-791.22</td>
      <td>-746.50</td>
      <td>-709.53</td>
      <td>-679.56</td>
      <td>-706.03</td>
      <td>-720.56</td>
      <td>-631.12</td>
      <td>-659.16</td>
      <td>-672.03</td>
      <td>-665.06</td>
      <td>-667.94</td>
      <td>-660.84</td>
      <td>-672.75</td>
      <td>-644.91</td>
      <td>-680.53</td>
      <td>-620.50</td>
      <td>-570.34</td>
      <td>-530.00</td>
      <td>-537.88</td>
      <td>-578.38</td>
      <td>-532.34</td>
      <td>-532.38</td>
      <td>-491.03</td>
      <td>-485.03</td>
      <td>-427.19</td>
      <td>-380.84</td>
      <td>-329.50</td>
      <td>-286.91</td>
      <td>-283.81</td>
      <td>-298.19</td>
      <td>-271.03</td>
      <td>-268.50</td>
      <td>-209.56</td>
      <td>-180.44</td>
      <td>...</td>
      <td>110.88</td>
      <td>16.50</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-1286.59</td>
      <td>-14.94</td>
      <td>64.09</td>
      <td>8.38</td>
      <td>45.31</td>
      <td>100.72</td>
      <td>91.53</td>
      <td>46.69</td>
      <td>20.34</td>
      <td>30.94</td>
      <td>-36.81</td>
      <td>-33.28</td>
      <td>-69.62</td>
      <td>-208.00</td>
      <td>-280.28</td>
      <td>-340.41</td>
      <td>-337.41</td>
      <td>-268.03</td>
      <td>-245.00</td>
      <td>-230.62</td>
      <td>-129.59</td>
      <td>-35.47</td>
      <td>122.34</td>
      <td>93.03</td>
      <td>93.03</td>
      <td>68.81</td>
      <td>9.81</td>
      <td>20.75</td>
      <td>20.25</td>
      <td>-120.81</td>
      <td>-257.56</td>
      <td>-215.41</td>
    </tr>
    <tr>
      <td>4</td>
      <td>2</td>
      <td>-39.57</td>
      <td>-15.88</td>
      <td>-9.16</td>
      <td>-6.37</td>
      <td>-16.13</td>
      <td>-24.05</td>
      <td>-0.90</td>
      <td>-45.20</td>
      <td>-5.04</td>
      <td>14.62</td>
      <td>-19.52</td>
      <td>-11.43</td>
      <td>-49.80</td>
      <td>25.84</td>
      <td>11.62</td>
      <td>3.18</td>
      <td>-9.59</td>
      <td>14.49</td>
      <td>8.82</td>
      <td>32.32</td>
      <td>-28.90</td>
      <td>-28.90</td>
      <td>-14.09</td>
      <td>-30.87</td>
      <td>-18.99</td>
      <td>-38.60</td>
      <td>-27.79</td>
      <td>9.65</td>
      <td>29.60</td>
      <td>7.88</td>
      <td>42.87</td>
      <td>27.59</td>
      <td>27.05</td>
      <td>20.26</td>
      <td>29.48</td>
      <td>9.71</td>
      <td>22.84</td>
      <td>25.99</td>
      <td>-667.55</td>
      <td>-1336.24</td>
      <td>...</td>
      <td>-171.62</td>
      <td>-122.12</td>
      <td>-32.01</td>
      <td>-47.15</td>
      <td>-56.45</td>
      <td>-41.71</td>
      <td>-34.13</td>
      <td>-43.12</td>
      <td>-53.63</td>
      <td>-53.63</td>
      <td>-53.63</td>
      <td>-24.29</td>
      <td>22.29</td>
      <td>25.18</td>
      <td>1.84</td>
      <td>-22.29</td>
      <td>-26.43</td>
      <td>-12.12</td>
      <td>-33.05</td>
      <td>-21.66</td>
      <td>-228.32</td>
      <td>-228.32</td>
      <td>-228.32</td>
      <td>-187.35</td>
      <td>-166.23</td>
      <td>-115.54</td>
      <td>-50.18</td>
      <td>-37.96</td>
      <td>-22.37</td>
      <td>-4.74</td>
      <td>-35.82</td>
      <td>-37.87</td>
      <td>-61.85</td>
      <td>-27.15</td>
      <td>-21.18</td>
      <td>-33.76</td>
      <td>-85.34</td>
      <td>-81.46</td>
      <td>-61.98</td>
      <td>-69.34</td>
      <td>-17.84</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 3198 columns</p>
</div>
</body>
</html>

<p>Our target column <code class="highlighter-rouge">LABEL</code> assigns each star with a 1 or a 2 to designate whether or not there is a confirmed exoplanet that was found in the star’s orbit. This is precisely what we are trying to classify in our model below.</p>

<p>Notice there are a total of only 42 stars that are labeled “2”, ie confirmed exoplanet orbiting this star. 
There are 37 exoplanet host stars in the training set, and only 5 in the test set. Such highly imbalanced classes will be something we need to deal with carefully in our model.</p>

<h2 id="check-nulls">Check Nulls</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check for nulls
</span><span class="k">print</span><span class="p">(</span><span class="s">'Train Nulls:'</span><span class="p">,</span><span class="n">train</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="nb">sum</span><span class="p">().</span><span class="n">value_counts</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Test Nulls:'</span><span class="p">,</span><span class="n">test</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="nb">sum</span><span class="p">().</span><span class="n">value_counts</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train Nulls: 0    3198
dtype: int64
Test Nulls: 0    3198
dtype: int64
</code></pre></div></div>

<h1 id="explore">Explore</h1>

<h2 id="planet-host-vs-non-host-stars">Planet Host vs Non-Host Stars</h2>

<p>Since we are setting out to classify stars as being either a planet-host or non-host, it would be useful to compare the data visually and see if we can pick up on any significant differences in the flux values with just our eyeballs. The simplest way to do this is plot the signals of each target class for a couple of stars and look at the scatter plots and a line plots.</p>

<h3 id="threshold-crossing-event-tce">Threshold Crossing Event (TCE)</h3>
<p>TCE is determined by a significant dip in the flux values, the assumption being something crossed in front of the star blocking its light for some period of time that the telescope has designated as suspect of an orbiting planet! The occurrence of a TCE means that star is flagged as a ‘Target of Interest’ or in K2’s case, ‘Kepler Object of Ineterst’ (KOI). The KOIs for each campaign have to be confirmed by a human, of course, usually an astrophysicist, and that is precisely where machine learning comes in - there are billions and billions of stars, and thus billions of billions of potential data points. “Looking for a needle in a haystack” doesn’t even work as a metaphor for a scale this immense. This is the ultimate challenge for data scientists! Let’s see what this looks like.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># grab first row of observations to create pandas series 
</span>
<span class="c1"># first row is label = 2 which is a confirmed exoplanet host star
# TCE "Threshold Crossing Event"
</span><span class="n">tce1</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">tce2</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span>

<span class="c1"># last row is label = 1 (no tce meaning no evidence this star hosts a planet)
</span><span class="n">no_tce1</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">no_tce2</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="p">:]</span>

<span class="n">display</span><span class="p">(</span><span class="n">tce1</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span><span class="n">tce2</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span><span class="n">no_tce1</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="n">no_tce2</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LABEL      2.00
FLUX.1    93.85
FLUX.2    83.81
FLUX.3    20.10
FLUX.4   -26.98
Name: 0, dtype: float64



LABEL      2.00
FLUX.1   -38.88
FLUX.2   -33.83
FLUX.3   -58.54
FLUX.4   -40.09
Name: 1, dtype: float64



LABEL       1.00
FLUX.1    323.28
FLUX.2    306.36
FLUX.3    293.16
FLUX.4    287.67
Name: 5086, dtype: float64



LABEL     1.00
FLUX.1    3.82
FLUX.2    2.09
FLUX.3   -3.29
FLUX.4   -2.88
Name: 5085, dtype: float64
</code></pre></div></div>

<h1 id="a-word-on-units">A Word on Units..</h1>

<p>After doing a little research (mostly by reading the K2 Handbook and visiting the MAST website where NASA houses all of its space telescope data) we learn that the flux values for campaign 3 that are in the Kaggle dataset have been put through a de-noising process. Prior to this particular de-noising process, the flux values would be called <code class="highlighter-rouge">SAP Flux</code> however in this case we are dealing with <code class="highlighter-rouge">PDC_SAP Flux</code>. At the moment the units may not seem to matter much, since we assume they are consist across all observations. However, as with anything relating to physics, and science for that matter, the units MATTER. All that to say, for now we are at least going to label the axes accurately so that later down the line if we want to compare this dataset to another from the archive, we will know the units! :)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View what this function is doing here:
# atomic_vector_plotter(): 
</span>
<span class="c1"># def atomic_vector_plotter(signal, label_col=None, classes=None, class_names=None, figsize=(15,5), 
#     y_units=None, x_units=None):
#         """
#         Plots scatter and line plots of time series signal values.  
</span>        
<span class="c1">#         **ARGS
#         signal: pandas series or numpy array
#         label_col: name of the label column if using labeled pandas series
#             -use default None for numpy array or unlabeled series.
#             -this is simply for customizing plot Title to include classification    
#         classes: (optional- req labeled data) tuple if binary, array if multiclass
#         class_names: tuple or array of strings denoting what the classes mean
#         figsize: size of the figures (default = (15,5))
</span>        
<span class="c1">#         ******
</span>        
<span class="c1">#         Ex1: Labeled timeseries passing 1st row of pandas dataframe
#         &gt; first create the signal:
#         star_signal_alpha = x_train.iloc[0, :]
#         &gt; then plot:
#         star_signals(star_signal_alpha, label_col='LABEL',classes=[1,2], 
#                     class_names=['No Planet', 'Planet']), figsize=(15,5))
</span>        
<span class="c1">#         Ex2: numpy array without any labels
#         &gt; first create the signal:
</span>        
<span class="c1">#         &gt;then plot:
#         star_signals(signal, figsize=(15,5))
</span>        
<span class="c1">#         ######
#         TODO: 
#         -`signal` should take an array rather than pdseries
#         -could allow either array or series to be passed, conv to array if series 
#         ######
#         """
</span>        
<span class="c1">#         # pass None to label_col if unlabeled data, creates generic title
#         if label_col is None:
#             label = None
#             title_scatter = "Scatterplot of Star Flux Signals"
#             title_line = "Line Plot of Star Flux Signals"
#             color='black'
</span>            
<span class="c1">#         # store target column as variable 
#         elif label_col is not None:
#             label = signal[label_col]
#             # for labeled timeseries
#             if label == 1:
#                 cn = class_names[0]
#                 color='red'
</span>
<span class="c1">#             elif label == 2:
#                 cn = class_names[1] 
#                 color='blue'
#         #create appropriate title acc to class_names    
#             title_scatter = f"Scatterplot for Star Flux Signal: {cn}"
#             title_line = f"Line Plot for Star Flux Signal: {cn}"
</span>        
<span class="c1">#         # Set x and y axis labels according to units
#         # if the units are unknown, we will default to "Flux"
#         if y_units == None:
#             y_units = 'Flux'
#         else:
#             y_units = y_units
#         # it is assumed this is a timeseries, default to "time"   
#         if x_units == None:
#             x_units = 'Time'
#         else:
#             x_units = x_units
</span>        
<span class="c1">#         # Scatter Plot 
</span>        
<span class="c1">#         plt.figure(figsize=figsize)
#         plt.scatter(pd.Series([i for i in range(1, len(signal))]), 
#                     signal[1:], marker=4, color=color)
#         plt.ylabel(y_units)
#         plt.xlabel(x_units)
#         plt.title(title_scatter)
#         plt.show()
</span>
<span class="c1">#         # Line Plot
#         plt.figure(figsize=figsize)
#         plt.plot(pd.Series([i for i in range(1, len(signal))]), 
#                 signal[1:], color=color)
#         plt.ylabel(y_units)
#         plt.xlabel(x_units)
#         plt.title(title_line)
#         plt.show()
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">spacekit.analyzer</span> <span class="kn">import</span> <span class="n">Flux</span>

<span class="n">Flux</span><span class="p">.</span><span class="n">atomic_vector_plotter</span><span class="p">(</span><span class="n">signal</span><span class="o">=</span><span class="n">tce1</span><span class="p">,</span> <span class="n">label_col</span><span class="o">=</span><span class="s">'LABEL'</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> 
         <span class="n">class_names</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span> <span class="s">'Planet'</span><span class="p">],</span> 
         <span class="n">y_units</span><span class="o">=</span><span class="s">'PDC_SAP Flux'</span><span class="p">,</span> <span class="n">x_units</span><span class="o">=</span><span class="s">'Time'</span><span class="p">)</span>

<span class="n">Flux</span><span class="p">.</span><span class="n">atomic_vector_plotter</span><span class="p">(</span><span class="n">signal</span><span class="o">=</span><span class="n">tce2</span><span class="p">,</span> <span class="n">label_col</span><span class="o">=</span><span class="s">'LABEL'</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
         <span class="n">class_names</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span> <span class="s">'Planet'</span><span class="p">],</span>
         <span class="n">y_units</span><span class="o">=</span><span class="s">'PDC_SAP Flux'</span><span class="p">,</span> <span class="n">x_units</span><span class="o">=</span><span class="s">'Time'</span><span class="p">)</span> 
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_32_0.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_32_1.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_32_2.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_32_3.png" alt="png" /></p>

<p>This second star’s flux signal pattern looks very different - are we to assume that each one of those dips is a transit event? Perhaps more than one planet is orbiting? Otherwise that would be a fairly short period. Let’s compare these to the NON planet host stars:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Flux</span><span class="p">.</span><span class="n">atomic_vector_plotter</span><span class="p">(</span><span class="n">signal</span><span class="o">=</span><span class="n">no_tce1</span><span class="p">,</span> <span class="n">label_col</span><span class="o">=</span><span class="s">'LABEL'</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
                         <span class="n">class_names</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span> <span class="s">'Planet'</span><span class="p">],</span>
                          <span class="n">y_units</span><span class="o">=</span><span class="s">'PDC_SAP Flux'</span><span class="p">,</span> <span class="n">x_units</span><span class="o">=</span><span class="s">'Time'</span><span class="p">)</span>

<span class="n">Flux</span><span class="p">.</span><span class="n">atomic_vector_plotter</span><span class="p">(</span><span class="n">signal</span><span class="o">=</span><span class="n">no_tce2</span><span class="p">,</span> <span class="n">label_col</span><span class="o">=</span><span class="s">'LABEL'</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
                         <span class="n">class_names</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span> <span class="s">'Planet'</span><span class="p">],</span>
                          <span class="n">y_units</span><span class="o">=</span><span class="s">'PDC_SAP Flux'</span><span class="p">,</span> <span class="n">x_units</span><span class="o">=</span><span class="s">'Time'</span><span class="p">)</span> 
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_34_0.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_34_1.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_34_2.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_34_3.png" alt="png" /></p>

<p>It’s hard to make a fair comparison with these plots without being able to see much in detail. We need to “zoom in” - this can be accomplished through normalizing and scaling techniques, but the standard procedure for this type of data would be to perform phase-folding based on the estimated period of the transiting planets.</p>

<h2 id="pre-processing">Pre-processing</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">spacekit.transformer</span> <span class="kn">import</span> <span class="n">Transformer</span>
<span class="n">T</span> <span class="o">=</span> <span class="n">transformer</span><span class="p">.</span><span class="n">Transformer</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View what this function is doing here:
# hypersonic_pliers()
</span>
<span class="c1"># def hypersonic_pliers(path_to_train, path_to_test):
</span>        
<span class="c1">#         """
#         Using Numpy to extract data into 1-dimensional arrays
#         separate target classes (y) for training and test data
#         assumes y (target) is first column in dataframe
</span>        
<span class="c1">#         #TODO: option to pass in column index loc for `y` if not default (0) 
#         #TODO: option for `y` to already be 0 or 1 (don't subtract 1)
#         #TODO: allow option for `y` to be categorical (convert via binarizer)
#         """
#         import numpy as np
</span>        
<span class="c1">#         Train = np.loadtxt(path_to_train, skiprows=1, delimiter=',')
#         X_train = Train[:, 1:]
#         y_train = Train[:, 0, np.newaxis] - 1.
</span>        
<span class="c1">#         Test = np.loadtxt(path_to_test, skiprows=1, delimiter=',')
#         X_test = Test[:, 1:]
#         y_test = Test[:, 0, np.newaxis] - 1.
</span>        
<span class="c1">#         del Train,Test
#         print("X_train: ", X_train.shape)
#         print("y_train: ", y_train.shape)
#         print("X_test: ", X_test.shape)
#         print("y_test: ", y_test.shape)
</span>        
<span class="c1">#         return X_train, X_test, y_train, y_test
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span><span class="n">y_test</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">hypersonic_pliers</span><span class="p">(</span><span class="n">DATA</span><span class="o">+</span><span class="s">'/exoTrain.csv'</span><span class="p">,</span> 
                                          <span class="n">DATA</span><span class="o">+</span><span class="s">'/exoTest.csv'</span><span class="p">)</span> 
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_train:  (5087, 3197)
y_train:  (5087, 1)
X_test:  (570, 3197)
y_test:  (570, 1)
</code></pre></div></div>

<h2 id="scaling">Scaling</h2>

<p>Scale each observation to zero mean and unit variance.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View what this function is doing here:
# thermo_fusion_chisel()
</span>
<span class="c1"># def thermo_fusion_chisel(matrix1, matrix2=None):
#             """
#             Scales each array of a matrix to zero mean and unit variance.
#             returns matrix/matrices of same shape as input but scaled
#             matrix2 is optional - useful if data was already train-test split
#             example: matrix1=X_train, matrix2=X_test
</span>            
<span class="c1">#             """
#             import numpy as np
</span>            
                
<span class="c1">#             matrix1 = ((matrix1 - np.mean(matrix1, axis=1).reshape(-1,1)) / 
#                 np.std(matrix1, axis=1).reshape(-1,1))
</span>            
<span class="c1">#             print("Mean: ",matrix1[0].mean())
#             print("Variance: ",matrix1[0].std())
</span>            
<span class="c1">#             if matrix2 is not None:
#                 matrix2 = ((matrix2 - np.mean(matrix2, axis=1).reshape(-1,1)) / 
#                     np.std(matrix2, axis=1).reshape(-1,1))
</span>            
<span class="c1">#                 print("Mean: ",matrix2[0].mean())
#                 print("Variance: ",matrix2[0].std())
#                 return matrix1,matrix2
#             else:
#                 return matrix1
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Scale each row to zero mean and unit variance.
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">thermo_fusion_chisel</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean:  0.0
Variance:  1.0
Mean:  2.6670356049800446e-17
Variance:  1.0
</code></pre></div></div>

<h2 id="de-noising">De-noising</h2>

<p>In order to reduce the amount of high frequency noise that is likely to have an adverse effect on the neural network’s learning outcomes, we can pass a uniform 1-D filter on our scaled train and test data then stack the arrays along the second axis. There are other techniques we might want to apply for further de-noising but for now we’ll start with this for the baseline.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(5087, 3197)
(5087, 1)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View what this function is doing here:
# babel_fish_dispenser()
</span>
<span class="c1"># def babel_fish_dispenser(matrix1, matrix2=None, step_size=None, axis=2):
#         """        
#         Adds an input corresponding to the running average over a set number
#         of time steps. This helps the neural network to ignore high frequency 
#         noise by passing in a uniform 1-D filter and stacking the arrays. 
</span>
<span class="c1">#         **ARGS
#         step_size: integer, # timesteps for 1D filter. defaults to 200
#         axis: which axis to stack the arrays
</span>
<span class="c1">#         ex:
#         noise_filter(matrix1=X_train, matrix2=X_test, step_size=200)
#         """
#         import numpy as np
#         from scipy.ndimage.filters import uniform_filter1d
</span>
<span class="c1">#         if step_size is None:
#             step_size=200
</span>
<span class="c1">#         # calc input for flux signal rolling avgs 
#         filter1 = uniform_filter1d(matrix1, axis=1, size=step_size)
#         # store in array and stack on 2nd axis for each obs of X data
#         matrix1 = np.stack([matrix1, filter1], axis=2)
</span>
<span class="c1">#         if matrix2 is not None:
#             filter2 = uniform_filter1d(matrix2, axis=1, size=step_size)
#             matrix2 = np.stack([matrix2, filter2], axis=2)
#             print(matrix1.shape,matrix2.shape)
#             return matrix1,matrix2
#         else:
#             print(matrix1.shape)
#             return matrix1
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we now have a 2-dimensional array for every star
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">babel_fish_dispenser</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">step_size</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> 
                                         <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(5087, 3197, 2) (570, 3197, 2)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># array on 2nd axis
</span><span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">x_train[-1] flux signal rolling avgs</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="c1"># plot arrays
</span><span class="n">rolling</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="mi">1</span><span class="p">][:,</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">rolling</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">rolling</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x_train[-1] flux signal rolling avgs

[-0.10910981 -0.10801068 -0.10926314 ... -0.18190533 -0.19232921
 -0.21176035]





[&lt;matplotlib.lines.Line2D at 0x1c428bf210&gt;]
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_48_2.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># viewed together...
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="mi">1</span><span class="p">][:,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">rolling</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[&lt;matplotlib.lines.Line2D at 0x1c42a8f2d0&gt;]
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_49_1.png" alt="png" /></p>

<h1 id="model">Model</h1>

<h2 id="build-model">Build Model</h2>

<h3 id="tactical-decisions"><strong>Tactical Decisions</strong></h3>

<p>Since I’m building the baseline model from scratch, a few considerations need to be made. While we can run a gridsearch (or randomizedsearchCV) to get the parameters for us, we still need to decide what type of model would be most ideal for this dataset, knowing what we know so far based on the work done so far. From there, we can go with best practices, assess the initial outcomes, and tune the hyperparameters with each iteration.</p>

<p><strong>CNN</strong>
The baseline will consist of a one-dimensional convolutional neural network (CNN). This is ideal for working with this particular dataset in which we will pass one row of the timeseries flux values as an array. This is very similar to how we would process image data (and that’s strategically useful if we want to develop the model in the future to handle Full-Frame Images from Tess, for instance, or spectographs of the flux frequences, for instance.</p>

<p><strong>1-Layer at a time</strong>
We’ll be using the Keras API which makes it easy to add in the layers one at a time. Each 1D convolutional layer corresponds to a local filter, and then a pooling layer reduces the data length by approximately a factor 4. At the end, there are two dense layers. Again, this is similar to the approach taken for a typical image classifier.</p>

<p><strong>Activation Function</strong>
The RELU activation function is closest to how real neurons actually work and often produces the best results compared to the other options, so we’ll at least start with this for the baseline.</p>

<p><strong>Batch Normalization</strong>
Finally, the batch normalization layers are what help to speed up convergence.</p>

<h1 id="model-1"><code class="highlighter-rouge">Model 1</code></h1>

<p>We’ll begin creating a baseline model with a lower than usual learning rate and then speed things up and fine-tune parameters for optimization in the next iterations. (The lower learning rate will help to ensure convergence.)</p>

<p>We’ll increase the learning rate in Model2 iteration and also tune any other parameters as necessary. The first iteration uses the Adam optimizer, however, SGD is also a good option we could try here.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(5087, 3197, 2)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(5087, 1)
</code></pre></div></div>

<h2 id="train-model">Train Model</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">spacekit.builder</span> <span class="kn">import</span> <span class="n">Keras</span>
<span class="n">K</span> <span class="o">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Keras</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View what this function is doing here:
# build_cnn()
</span>
<span class="c1"># def build_cnn(X_train, X_test, y_train, y_test, kernel_size=None, 
#               activation=None, input_shape=None, strides=None, 
#               optimizer=Adam, learning_rate=None, loss=None, metrics=None):
#     """
#     Builds, compiles and fits a linear CNN using Keras API
</span>
<span class="c1">#     """
#     import keras
#     from keras.utils.np_utils import to_categorical
#     # from keras.preprocessing.text import Tokenizer
#     from keras import models, layers, optimizers
#     from keras.models import Sequential, Model
#     from keras.layers import Conv1D, MaxPool1D, Dense, Dropout, Flatten, \
#     BatchNormalization, Input, concatenate, Activation
#     from keras.optimizers import Adam
#     from keras.wrappers.scikit_learn import KerasClassifier
#     from sklearn.model_selection import cross_val_score
</span>
<span class="c1">#     if input_shape is None:
#         input_shape = X_train.shape[1:]
#     if kernel_size is None:
#         kernel_size=11
#     if activation is None:
#         activation='relu'
#     if strides is None:
#         strides = 4
#     if learning_rate is None:
#         learning_rate = 1e-5
#     if loss is None:
#         loss='binary_crossentropy'
#     if metrics is None:
#         metrics=['accuracy']
</span>
<span class="c1">#     print("BUILDING MODEL...")
#     model=Sequential()
</span>
<span class="c1">#     print("LAYER 1")
#     model.add(Conv1D(filters=8, kernel_size=kernel_size, 
#                     activation=activation, input_shape=input_shape))
#     model.add(MaxPool1D(strides=strides))
#     model.add(BatchNormalization())
</span>
<span class="c1">#     print("LAYER 2")
#     model.add(Conv1D(filters=16, kernel_size=kernel_size, 
#                     activation=activation))
#     model.add(MaxPool1D(strides=strides))
#     model.add(BatchNormalization())
</span>
<span class="c1">#     print("LAYER 3")
#     model.add(Conv1D(filters=32, kernel_size=kernel_size, 
#                     activation=activation))
#     model.add(MaxPool1D(strides=strides))
#     model.add(BatchNormalization())
</span>
<span class="c1">#     print("LAYER 4")
#     model.add(Conv1D(filters=64, kernel_size=kernel_size, 
#                     activation=activation))
#     model.add(MaxPool1D(strides=strides))
#     model.add(Flatten())
</span>
<span class="c1">#     print("FULL CONNECTION")
#     model.add(Dropout(0.5))
#     model.add(Dense(64, activation=activation))
#     model.add(Dropout(0.25))
#     model.add(Dense(64, activation=activation))
</span>
<span class="c1">#     print("ADDING COST FUNCTION")
#     model.add(Dense(1, activation='sigmoid'))
</span>
<span class="c1">#     ##### COMPILE #####
#     model.compile(optimizer=optimizer(learning_rate), loss=loss, 
#                 metrics=metrics)
#     print("COMPILED")  
</span>
<span class="c1">#     return model 
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m1</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">build_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span> 
                     <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> 
                     <span class="n">strides</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="n">Adam</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">1e-5</span><span class="p">,</span> 
                     <span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BUILDING MODEL...
LAYER 1
LAYER 2
LAYER 3
LAYER 4
FULL CONNECTION
ADDING COST FUNCTION
COMPILED
</code></pre></div></div>

<h2 id="batch-generator">Batch Generator</h2>

<p>To correct for the extremely unbalanced dataset, we’ll ensure that the network sees 50% of the positive sample over each batch. We will also apply augmentation by rotating each of the samples randomly each time, thus generating new data. This is similar to image classification when we rotate or shift the samples each time.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View what this function is doing here:
# fit_cnn()
</span>
<span class="c1"># def fit_cnn(X_train,y_train, X_test, y_test, model, validation_data=None, 
#                 verbose=None, epochs=None, steps_per_epoch=None, batch_size=None):
</span>        
<span class="c1">#         if verbose is None:
#             verbose=2
#         if epochs is None:
#             epochs = 5
#         if validation_data is None:
#             validation_data=(X_test, y_test)
#         if steps_per_epoch is None:
#             steps_per_epoch = (X_train.shape[1]//batch_size)
#         if batch_size is None:
#             batch_size = 32
</span>
<span class="c1">#         print("FITTING MODEL...")
</span>        
<span class="c1">#         def batch_maker(X_train, y_train, batch_size=batch_size):
#                 """
#                 Gives equal number of positive and negative samples rotating randomly                
#                 The output of the generator must be either
#                 - a tuple `(inputs, targets)`
#                 - a tuple `(inputs, targets, sample_weights)`.
</span>
<span class="c1">#                 This tuple (a single output of the generator) makes a single
#                 batch. Therefore, all arrays in this tuple must have the same
#                 length (equal to the size of this batch). Different batches may have 
#                 different sizes. 
</span>
<span class="c1">#                 For example, the last batch of the epoch is commonly smaller than the others, 
#                 if the size of the dataset is not divisible by the batch size.
#                 The generator is expected to loop over its data indefinitely. 
#                 An epoch finishes when `steps_per_epoch` batches have been seen by the model.
</span>                
<span class="c1">#                 """
#                 import numpy
#                 import random
#                 # hb: half-batch
#                 hb = batch_size // 2
</span>                
<span class="c1">#                 # Returns a new array of given shape and type, without initializing.
#                 # x_train.shape = (5087, 3197, 2)
#                 xb = np.empty((batch_size, X_train.shape[1], X_train.shape[2]), dtype='float32')
</span>                
<span class="c1">#                 #y_train.shape = (5087, 1)
#                 yb = np.empty((batch_size, y_train.shape[1]), dtype='float32')
</span>                
<span class="c1">#                 pos = np.where(y_train[:,0] == 1.)[0]
#                 neg = np.where(y_train[:,0] == 0.)[0]
</span>
<span class="c1">#                 # rotating each of the samples randomly
#                 while True:
#                     np.random.shuffle(pos)
#                     np.random.shuffle(neg)
</span>                
<span class="c1">#                     xb[:hb] = X_train[pos[:hb]]
#                     xb[hb:] = X_train[neg[hb:batch_size]]
#                     yb[:hb] = y_train[pos[:hb]]
#                     yb[hb:] = y_train[neg[hb:batch_size]]
</span>                
<span class="c1">#                     for i in range(batch_size):
#                         size = np.random.randint(xb.shape[1])
#                         xb[i] = np.roll(xb[i], size, axis=0)
</span>                
<span class="c1">#                     yield xb, yb
</span>        
<span class="c1">#         history = model.fit_generator(batch_maker(X_train, y_train, batch_size),
#                                         validation_data=validation_data, 
#                                         verbose=verbose, epochs=epochs, 
#                                         steps_per_epoch=steps_per_epoch)
#         print("TRAINING COMPLETE")
#         model.summary()
</span>
<span class="c1">#         return history
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">h1</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">fit_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">m1</span><span class="p">,</span>
               <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> 
               <span class="n">steps_per_epoch</span><span class="o">=</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="mi">32</span><span class="p">),</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FITTING MODEL...
Epoch 1/5
 - 26s - loss: 0.7978 - accuracy: 0.5044 - val_loss: 0.6152 - val_accuracy: 0.9351
Epoch 2/5
 - 24s - loss: 0.7549 - accuracy: 0.5117 - val_loss: 0.6112 - val_accuracy: 0.8439
Epoch 3/5
 - 26s - loss: 0.7197 - accuracy: 0.5319 - val_loss: 0.6259 - val_accuracy: 0.7386
Epoch 4/5
 - 26s - loss: 0.7358 - accuracy: 0.5063 - val_loss: 0.6466 - val_accuracy: 0.6474
Epoch 5/5
 - 23s - loss: 0.7300 - accuracy: 0.5142 - val_loss: 0.6549 - val_accuracy: 0.6193
TRAINING COMPLETE
Model: "sequential_1"
_________________________________________________________________
Layer (type)                 output Shape              Param #   
=================================================================
conv1d_1 (Conv1D)            (None, 3187, 8)           184       
_________________________________________________________________
max_pooling1d_1 (MaxPooling1 (None, 797, 8)            0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 797, 8)            32        
_________________________________________________________________
conv1d_2 (Conv1D)            (None, 787, 16)           1424      
_________________________________________________________________
max_pooling1d_2 (MaxPooling1 (None, 197, 16)           0         
_________________________________________________________________
batch_normalization_2 (Batch (None, 197, 16)           64        
_________________________________________________________________
conv1d_3 (Conv1D)            (None, 187, 32)           5664      
_________________________________________________________________
max_pooling1d_3 (MaxPooling1 (None, 47, 32)            0         
_________________________________________________________________
batch_normalization_3 (Batch (None, 47, 32)            128       
_________________________________________________________________
conv1d_4 (Conv1D)            (None, 37, 64)            22592     
_________________________________________________________________
max_pooling1d_4 (MaxPooling1 (None, 9, 64)             0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 576)               0         
_________________________________________________________________
dropout_1 (Dropout)          (None, 576)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 64)                36928     
_________________________________________________________________
dropout_2 (Dropout)          (None, 64)                0         
_________________________________________________________________
dense_2 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_3 (Dense)              (None, 1)                 65        
=================================================================
Total params: 71,241
Trainable params: 71,129
Non-trainable params: 112
_________________________________________________________________
</code></pre></div></div>

<h2 id="evaluate-m1">Evaluate (M1)</h2>

<p>Let’s assess the model thus far before tuning parameters. We’ll create a few helper functions for calculating metrics and analyzing results visually.</p>

<h2 id="class-predictions">Class Predictions</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View function: get_preds()
</span>
<span class="c1"># def get_preds(X,y,model=None,verbose=False):
#     if model is None:
#         model=model
#     # class predictions 
#     y_true = y.flatten()
</span>    
<span class="c1">#     y_pred = model.predict_classes(X).flatten() 
#     preds = pd.Series(y_pred).value_counts(normalize=False)
</span>    
<span class="c1">#     if verbose:
#         print(f"y_pred:\n {preds}")
#         print("\n")
</span>
<span class="c1">#     return y_true, y_pred
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span> <span class="o">=</span> <span class="n">computer</span><span class="p">.</span><span class="n">get_preds</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span><span class="n">y_test</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">m1</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y_pred:
 0    354
1    216
dtype: int64
</code></pre></div></div>

<h3 id="false---rates-training">False -/+ Rates (Training)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># view function: fnfp()
</span>
<span class="c1"># def fnfp(X,y,model, training=False):
</span>
<span class="c1">#     import numpy as np
</span>
<span class="c1">#     y_pred = np.round( model.predict(X) )
</span>
<span class="c1">#     pos_idx = y==1
#     neg_idx = y==0
</span>
<span class="c1">#     #tp = np.sum(y_pred[pos_idx]==1)/y_pred.shape[0]
#     fn = np.sum(y_pred[pos_idx]==0)/y_pred.shape[0]
</span>
<span class="c1">#     #tn = np.sum(y_pred[neg_idx]==0)/y_pred.shape[0]
#     fp = np.sum(y_pred[neg_idx]==1)/y_pred.shape[0]
</span>
<span class="c1">#     if training:
#         print(f"FN Rate (Training): {round(fn*100,4)}%")
#         print(f"FP Rate (Training): {round(fp*100,4)}%")
#     else:
#         print(f"FN Rate (Test): {round(fn*100,4)}%")
#         print(f"FP Rate (Test): {round(fp*100,4)}%")
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">computer</span><span class="p">.</span><span class="n">fnfp</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">m1</span><span class="p">,</span> <span class="n">training</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FN Rate (Training): 0.2556%
FP Rate (Training): 39.4339%
</code></pre></div></div>

<h3 id="false---rates-test">False -/+ Rates (Test)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">computer</span><span class="p">.</span><span class="n">fnfp</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">m1</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FN Rate (Test): 0.5263%
FP Rate (Test): 37.5439%
</code></pre></div></div>

<h3 id="classification-report">Classification Report</h3>

<p>Sci-kit learn has a nice built-in method for evaluating our model:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">metrics</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">f1_score</span><span class="p">,</span> <span class="n">recall_score</span>

<span class="n">report</span> <span class="o">=</span> <span class="n">metrics</span><span class="p">.</span><span class="n">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_pred</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>              precision    recall  f1-score   support

         0.0       0.99      0.62      0.76       565
         1.0       0.01      0.40      0.02         5

    accuracy                           0.62       570
   macro avg       0.50      0.51      0.39       570
weighted avg       0.98      0.62      0.76       570
</code></pre></div></div>

<h4 id="fowlkes-mallows">Fowlkes-Mallows</h4>

<p>Fowlkes-Mallows is a good metric for imbalanced datasets, along with Jaccard which is similar to F1.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sklearn</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">fowlkes_mallows_score</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span><span class="n">y_pred</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.7207089012303081
</code></pre></div></div>

<h3 id="interpret-scores">Interpret Scores</h3>
<p>With only 5 epochs, the model performed high in precision. However, because this such an imbalanced dataset, recall and F1 score are more critical metrics and these could definitely be improved. We’ll tune some of the hyperparameters, specifically adjusting the learning rate and increasing the number of epochs up to 40.</p>

<h3 id="history-metrics">History Metrics</h3>

<p>The baseline model is not meant to give us optimal results - the real test will be in our final model below. First let’s take a look at some of the visuals to understand what the scores really mean. This will help us decide how to proceed in tuning the model appropriately.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># view function: keras_history()
</span>
<span class="c1"># def keras_history(history, figsize=(10,4)):
#     """
#     side by side sublots of training val accuracy and loss (left and right respectively)
#     """
</span>    
<span class="c1">#     import matplotlib.pyplot as plt
</span>    
<span class="c1">#     fig,axes=plt.subplots(ncols=2,figsize=(15,6))
#     axes = axes.flatten()
</span>
<span class="c1">#     ax = axes[0]
#     ax.plot(history.history['accuracy'])
#     ax.plot(history.history['val_accuracy'])
#     ax.set_title('Model Accuracy')
#     ax.set_ylabel('Accuracy')
#     ax.set_xlabel('Epoch')
#     ax.legend(['Train', 'Test'], loc='upper left')
</span>
<span class="c1">#     ax = axes[1]
#     ax.plot(history.history['loss'])
#     ax.plot(history.history['val_loss'])
#     ax.set_title('Model Loss')
#     ax.set_ylabel('Loss')
#     ax.set_xlabel('Epoch')
#     ax.legend(['Train', 'Test'], loc='upper left')
#     plt.show()
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">computer</span><span class="p">.</span><span class="n">keras_history</span><span class="p">(</span><span class="n">h1</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_80_0.png" alt="png" /></p>

<p>With only a few epochs, and a small learning rate, it’s obvious that our training parameters have a great deal of room for improvement. This is good - we will definitely need to adjust the learning rate. If that doesn’t go far enough in producing desired results, we can also try using a different optimizer such as SGD instead of Adam. For now let’s look at a few other key metrics.</p>

<h2 id="fusion-matrix">Fusion Matrix</h2>

<p>It’s like a confusion matrix, without the confusion…</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># View Function: fusion_matrix()
# def fusion_matrix(matrix, classes=None, normalize=True, title='Fusion Matrix', cmap='Blues',
#     print_raw=False): 
#     """
#     FUSION MATRIX!
#     -------------
#     It's like a confusion matrix...without the confusion.
</span>    
<span class="c1">#     matrix: can pass in matrix or a tuple (ytrue,ypred) to create on the fly 
#     classes: class names for target variables
#     """
#     from sklearn import metrics                       
#     from sklearn.metrics import confusion_matrix #ugh
#     import itertools
#     import numpy as np
#     import matplotlib as mpl
#     import matplotlib.pyplot as plt
</span>    
<span class="c1">#     # make matrix if tuple passed to matrix:
#     if isinstance(matrix, tuple):
#         y_true = matrix[0].copy()
#         y_pred = matrix[1].copy()
</span>        
<span class="c1">#         if y_true.ndim&gt;1:
#             y_true = y_true.argmax(axis=1)
#         if y_pred.ndim&gt;1:
#             y_pred = y_pred.argmax(axis=1)
#         fusion = metrics.confusion_matrix(y_true, y_pred)
#     else:
#         fusion = matrix
</span>    
<span class="c1">#     # INTEGER LABELS
#     if classes is None:
#         classes=list(range(len(matrix)))
</span>
<span class="c1">#     #NORMALIZING
#     # Check if normalize is set to True
#     # If so, normalize the raw fusion matrix before visualizing
#     if normalize:
#         fusion = fusion.astype('float') / fusion.sum(axis=1)[:, np.newaxis]
#         thresh = 0.5
#         fmt='.2f'
#     else:
#         fmt='d'
#         thresh = fusion.max() / 2.
</span>    
<span class="c1">#     # PLOT
#     fig, ax = plt.subplots(figsize=(10,10))
#     plt.imshow(fusion, cmap=cmap, aspect='equal')
</span>    
<span class="c1">#     # Add title and axis labels 
#     plt.title(title) 
#     plt.ylabel('TRUE') 
#     plt.xlabel('PRED')
</span>    
<span class="c1">#     # Add appropriate axis scales
#     tick_marks = np.arange(len(classes))
#     plt.xticks(tick_marks, classes, rotation=45)
#     plt.yticks(tick_marks, classes)
#     #ax.set_ylim(len(fusion), -.5,.5) ## &lt;-- This was messing up the plots!
</span>    
<span class="c1">#     # Text formatting
#     fmt = '.2f' if normalize else 'd'
#     # Add labels to each cell
#     #thresh = fusion.max() / 2.
#     # iterate thru matrix and append labels  
#     for i, j in itertools.product(range(fusion.shape[0]), range(fusion.shape[1])):
#         plt.text(j, i, format(fusion[i, j], fmt),
#                 horizontalalignment='center',
#                 color='white' if fusion[i, j] &gt; thresh else 'black',
#                 size=14, weight='bold')
</span>    
<span class="c1">#     # Add a legend
#     plt.colorbar()
#     plt.show() 
#     return fusion, fig
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m1_fusion</span> <span class="o">=</span> <span class="n">computer</span><span class="p">.</span><span class="n">fusion_matrix</span><span class="p">(</span><span class="n">matrix</span><span class="o">=</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span><span class="n">y_pred</span><span class="p">),</span> 
                          <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span><span class="s">'Planet'</span><span class="p">],</span> 
                                   <span class="n">title</span><span class="o">=</span><span class="s">'M1 Fusion Matrix'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_84_0.png" alt="png" /></p>

<p>The baseline model only managed to correctly identify 2 planets in the test set, while missing the other 3. The model incorrectly classified 215 non-TCEs as planets.</p>

<h2 id="roc-auc">ROC AUC</h2>

<p>Plot the ROC area under the curve</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># view function: roc_plots()
</span>

<span class="c1"># def roc_plots(X,y,model):
#     from sklearn import metrics
#     from sklearn.metrics import roc_curve, roc_auc_score, accuracy_score
</span>
<span class="c1">#     y_true = y.flatten()
#     y_hat = model.predict(X)
</span>
<span class="c1">#     fpr, tpr, thresholds = roc_curve(y_true, y_hat) 
</span>
<span class="c1">#     # Threshold Cutoff for predictions
#     crossover_index = np.min(np.where(1.-fpr &lt;= tpr))
#     crossover_cutoff = thresholds[crossover_index]
#     crossover_specificity = 1.-fpr[crossover_index]
</span>
<span class="c1">#     fig,axes=plt.subplots(ncols=2, figsize=(15,6))
#     axes = axes.flatten()
</span>
<span class="c1">#     ax=axes[0]
#     ax.plot(thresholds, 1.-fpr)
#     ax.plot(thresholds, tpr)
#     ax.set_title("Crossover at {0:.2f}, Specificity {1:.2f}".format(crossover_cutoff, crossover_specificity))
</span>
<span class="c1">#     ax=axes[1]
#     ax.plot(fpr, tpr)
#     ax.set_title("ROC area under curve: {0:.2f}".format(roc_auc_score(y_true, y_hat)))
#     plt.show()
</span>    
<span class="c1">#     roc = roc_auc_score(y_true,y_hat)
</span>
<span class="c1">#     return roc
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m1_roc</span> <span class="o">=</span> <span class="n">computer</span><span class="p">.</span><span class="n">roc_plots</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">m1</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_88_0.png" alt="png" /></p>

<h1 id="model-2"><code class="highlighter-rouge">Model 2</code></h1>

<p>Initial parameter tuning: increase learning rate to 3e-4 (0.0003), and increase epochs to 20.</p>

<h2 id="build-m2">Build M2</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#### MODEL 2 
# adjust learning rate to 3e-4
</span>
<span class="n">m2</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">build_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span> 
                     <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> 
                     <span class="n">strides</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="n">Adam</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">3e-4</span><span class="p">,</span> 
                     <span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BUILDING MODEL...
LAYER 1
LAYER 2
LAYER 3
LAYER 4
FULL CONNECTION
ADDING COST FUNCTION
COMPILED
</code></pre></div></div>

<h2 id="fit-m2">Fit M2</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># increase number of epochs to 20
</span>
<span class="n">h2</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">fit_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">m2</span><span class="p">,</span>
               <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
               <span class="n">steps_per_epoch</span><span class="o">=</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="mi">32</span><span class="p">),</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FITTING MODEL...
Epoch 1/20
 - 22s - loss: 0.6945 - accuracy: 0.5827 - val_loss: 0.9014 - val_accuracy: 0.0193
Epoch 2/20
 - 24s - loss: 0.6220 - accuracy: 0.6493 - val_loss: 0.8088 - val_accuracy: 0.2842
Epoch 3/20
 - 26s - loss: 0.5791 - accuracy: 0.7033 - val_loss: 0.6019 - val_accuracy: 0.7175
Epoch 4/20
 - 27s - loss: 0.5302 - accuracy: 0.7276 - val_loss: 0.4064 - val_accuracy: 0.8509
Epoch 5/20
 - 29s - loss: 0.4857 - accuracy: 0.7715 - val_loss: 0.5536 - val_accuracy: 0.7140
Epoch 6/20
 - 25s - loss: 0.4389 - accuracy: 0.7986 - val_loss: 0.4794 - val_accuracy: 0.7316
Epoch 7/20
 - 24s - loss: 0.4059 - accuracy: 0.8220 - val_loss: 0.6372 - val_accuracy: 0.6351
Epoch 8/20
 - 29s - loss: 0.3419 - accuracy: 0.8488 - val_loss: 0.7515 - val_accuracy: 0.5930
Epoch 9/20
 - 28s - loss: 0.3195 - accuracy: 0.8665 - val_loss: 0.4455 - val_accuracy: 0.7667
Epoch 10/20
 - 27s - loss: 0.2705 - accuracy: 0.8971 - val_loss: 0.8245 - val_accuracy: 0.6070
Epoch 11/20
 - 28s - loss: 0.2380 - accuracy: 0.9066 - val_loss: 0.2590 - val_accuracy: 0.8789
Epoch 12/20
 - 23s - loss: 0.2056 - accuracy: 0.9274 - val_loss: 0.3441 - val_accuracy: 0.8684
Epoch 13/20
 - 41s - loss: 0.1805 - accuracy: 0.9280 - val_loss: 0.1826 - val_accuracy: 0.9298
Epoch 14/20
 - 30s - loss: 0.1878 - accuracy: 0.9397 - val_loss: 0.1023 - val_accuracy: 0.9684
Epoch 15/20
 - 23s - loss: 0.1755 - accuracy: 0.9451 - val_loss: 0.1844 - val_accuracy: 0.9404
Epoch 16/20
 - 23s - loss: 0.1658 - accuracy: 0.9400 - val_loss: 0.3103 - val_accuracy: 0.8719
Epoch 17/20
 - 23s - loss: 0.1483 - accuracy: 0.9501 - val_loss: 0.1477 - val_accuracy: 0.9526
Epoch 18/20
 - 23s - loss: 0.1628 - accuracy: 0.9470 - val_loss: 0.1443 - val_accuracy: 0.9439
Epoch 19/20
 - 29s - loss: 0.1118 - accuracy: 0.9631 - val_loss: 0.1330 - val_accuracy: 0.9614
Epoch 20/20
 - 31s - loss: 0.1173 - accuracy: 0.9580 - val_loss: 0.0629 - val_accuracy: 0.9842
TRAINING COMPLETE
Model: "sequential_2"
_________________________________________________________________
Layer (type)                 output Shape              Param #   
=================================================================
conv1d_5 (Conv1D)            (None, 3187, 8)           184       
_________________________________________________________________
max_pooling1d_5 (MaxPooling1 (None, 797, 8)            0         
_________________________________________________________________
batch_normalization_4 (Batch (None, 797, 8)            32        
_________________________________________________________________
conv1d_6 (Conv1D)            (None, 787, 16)           1424      
_________________________________________________________________
max_pooling1d_6 (MaxPooling1 (None, 197, 16)           0         
_________________________________________________________________
batch_normalization_5 (Batch (None, 197, 16)           64        
_________________________________________________________________
conv1d_7 (Conv1D)            (None, 187, 32)           5664      
_________________________________________________________________
max_pooling1d_7 (MaxPooling1 (None, 47, 32)            0         
_________________________________________________________________
batch_normalization_6 (Batch (None, 47, 32)            128       
_________________________________________________________________
conv1d_8 (Conv1D)            (None, 37, 64)            22592     
_________________________________________________________________
max_pooling1d_8 (MaxPooling1 (None, 9, 64)             0         
_________________________________________________________________
flatten_2 (Flatten)          (None, 576)               0         
_________________________________________________________________
dropout_3 (Dropout)          (None, 576)               0         
_________________________________________________________________
dense_4 (Dense)              (None, 64)                36928     
_________________________________________________________________
dropout_4 (Dropout)          (None, 64)                0         
_________________________________________________________________
dense_5 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_6 (Dense)              (None, 1)                 65        
=================================================================
Total params: 71,241
Trainable params: 71,129
Non-trainable params: 112
_________________________________________________________________
</code></pre></div></div>

<h2 id="evaluate-m2">Evaluate M2</h2>

<p>The <code class="highlighter-rouge">compute</code> function combines all the functions used above for calculating the metrics into one shot:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># view function: compute()
# def compute(X, y, model, hist=None, preds=True, summary=True, fusion=True, 
#             classes=None, report=True, roc=True):
#     """
#     evaluates model predictions and stores the output in a dict
#     returns `results`
#     """
#     import pandas as pd
#     import matplotlib.pyplot as plt
#     from sklearn import metrics
#     from sklearn.metrics import jaccard_score,accuracy_score, recall_score, fowlkes_mallows_score
</span>
<span class="c1">#     # initialize a spare improbability drive
#     res = {}
#     res['model'] = model.name
</span>    
<span class="c1">#     # class predictions 
#     if preds:
#         y_true = y.flatten()
#         y_pred = model.predict_classes(X).flatten()
#         res['preds'] = [y_pred]
</span>
<span class="c1">#     if summary:
#         summary = model.summary()
#         res['summary'] = model.summary
</span>

<span class="c1">#     # FUSION MATRIX
#     if fusion:
#         if classes is None:
#             classes=['0','1']
#         else:
#             classes=classes
#         # Plot fusion matrix
#         FM = fusion_matrix(matrix=(y_true,y_pred), 
#                                     classes=classes)
#         res['FM'] = FM
</span>
<span class="c1">#     # ROC Area Under Curve
#     if roc:
#         ROC = roc_plots(X, y, model)
#         res['ROC'] = ROC
</span>
<span class="c1">#     # CLASSIFICATION REPORT
#     if report:
#         num_dashes=20
#         print('\n')
#         print('---'*num_dashes)
#         print('\tCLASSIFICATION REPORT:')
#         print('---'*num_dashes)
#         # generate report
#         report = metrics.classification_report(y_true,y_pred)
#         res['report'] = report
#         print(report)
</span>

<span class="c1">#     # save to dict:
#     res['jaccard'] = jaccard_score(y_true, y_pred)
#     res['fowlkes'] = fowlkes_mallows_score(y_true,y_pred)
#     res['accuracy'] = accuracy_score(y_true, y_pred)
#     res['recall'] = recall_score(y_true, y_pred)
</span>    
<span class="c1">#     #Plot Model Training Results (PLOT KERAS HISTORY)
#     if hist is not None:
#         HIST = keras_history(hist)
#         res['HIST'] = HIST
</span>
<span class="c1">#     return res
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res_m2</span> <span class="o">=</span> <span class="n">computer</span><span class="p">.</span><span class="n">compute</span><span class="p">(</span><span class="n">X</span><span class="o">=</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y_test</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">m2</span><span class="p">,</span> <span class="n">hist</span><span class="o">=</span><span class="n">h2</span><span class="p">,</span> <span class="n">preds</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
               <span class="n">summary</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">report</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fusion</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
               <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span><span class="s">'Planet'</span><span class="p">],</span><span class="n">roc</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_96_0.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_96_1.png" alt="png" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------------------------------------------------------------
	CLASSIFICATION REPORT:
------------------------------------------------------------
              precision    recall  f1-score   support

         0.0       1.00      0.98      0.99       565
         1.0       0.36      1.00      0.53         5

    accuracy                           0.98       570
   macro avg       0.68      0.99      0.76       570
weighted avg       0.99      0.98      0.99       570
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_96_3.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We can retrieve a given metric from the computer's compute function 
# by accessing any of the given keys from the RES dictionary
</span>
<span class="c1"># res_m2.keys()
</span>
<span class="c1"># ['model']
# ['preds']
# ['summary']()
# ['FM'][0]
# ['FM'][1]
# ['ROC']
#print(res_m2['report'])
# ['jaccard']
</span> <span class="c1">#res_m2['fowlkes']
# ['accuracy']
# ['recall']
# ['HIST']
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res_m2</span><span class="p">[</span><span class="s">'fowlkes'</span><span class="p">]</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.9840290257993071
</code></pre></div></div>

<h1 id="model-3"><code class="highlighter-rouge">MODEL 3</code></h1>

<h2 id="build-m3">Build M3</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#### MODEL 3
# increase learning rate to 4e-3
</span>
<span class="n">m3</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">build_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span> 
                     <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> 
                     <span class="n">strides</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="n">Adam</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">4e-3</span><span class="p">,</span> 
                     <span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BUILDING MODEL...
LAYER 1
LAYER 2
LAYER 3
LAYER 4
FULL CONNECTION
ADDING COST FUNCTION
COMPILED
</code></pre></div></div>

<h2 id="train-m3">Train M3</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># keep number of epochs at 20
</span>
<span class="n">h3</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">fit_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">m3</span><span class="p">,</span>
               <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
               <span class="n">steps_per_epoch</span><span class="o">=</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="mi">32</span><span class="p">),</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FITTING MODEL...
Epoch 1/20
 - 22s - loss: 0.6099 - accuracy: 0.6657 - val_loss: 0.0556 - val_accuracy: 0.9895
Epoch 2/20
 - 21s - loss: 0.4555 - accuracy: 0.7945 - val_loss: 0.2497 - val_accuracy: 0.9088
Epoch 3/20
 - 18s - loss: 0.3589 - accuracy: 0.8523 - val_loss: 0.3350 - val_accuracy: 0.8404
Epoch 4/20
 - 17s - loss: 0.2505 - accuracy: 0.8987 - val_loss: 0.3346 - val_accuracy: 0.8649
Epoch 5/20
 - 17s - loss: 0.3538 - accuracy: 0.8475 - val_loss: 0.2626 - val_accuracy: 0.8649
Epoch 6/20
 - 17s - loss: 0.2716 - accuracy: 0.8911 - val_loss: 0.0878 - val_accuracy: 0.9737
Epoch 7/20
 - 18s - loss: 0.2058 - accuracy: 0.9205 - val_loss: 0.1999 - val_accuracy: 0.9333
Epoch 8/20
 - 17s - loss: 0.1560 - accuracy: 0.9441 - val_loss: 0.3655 - val_accuracy: 0.8333
Epoch 9/20
 - 19s - loss: 0.1411 - accuracy: 0.9454 - val_loss: 0.2266 - val_accuracy: 0.8930
Epoch 10/20
 - 23s - loss: 0.1298 - accuracy: 0.9504 - val_loss: 0.1879 - val_accuracy: 0.9456
Epoch 11/20
 - 18s - loss: 0.1369 - accuracy: 0.9539 - val_loss: 0.0602 - val_accuracy: 0.9825
Epoch 12/20
 - 22s - loss: 0.1084 - accuracy: 0.9618 - val_loss: 0.0592 - val_accuracy: 0.9807
Epoch 13/20
 - 22s - loss: 0.0720 - accuracy: 0.9751 - val_loss: 0.0496 - val_accuracy: 0.9912
Epoch 14/20
 - 18s - loss: 0.0986 - accuracy: 0.9640 - val_loss: 0.0982 - val_accuracy: 0.9719
Epoch 15/20
 - 21s - loss: 0.1033 - accuracy: 0.9624 - val_loss: 0.0443 - val_accuracy: 0.9807
Epoch 16/20
 - 19s - loss: 0.1129 - accuracy: 0.9586 - val_loss: 0.3545 - val_accuracy: 0.8596
Epoch 17/20
 - 19s - loss: 0.1059 - accuracy: 0.9612 - val_loss: 0.4088 - val_accuracy: 0.8754
Epoch 18/20
 - 17s - loss: 0.1018 - accuracy: 0.9634 - val_loss: 0.1042 - val_accuracy: 0.9614
Epoch 19/20
 - 17s - loss: 0.0753 - accuracy: 0.9729 - val_loss: 0.0507 - val_accuracy: 0.9842
Epoch 20/20
 - 17s - loss: 0.0587 - accuracy: 0.9779 - val_loss: 0.0699 - val_accuracy: 0.9789
TRAINING COMPLETE
Model: "sequential_3"
_________________________________________________________________
Layer (type)                 output Shape              Param #   
=================================================================
conv1d_9 (Conv1D)            (None, 3187, 8)           184       
_________________________________________________________________
max_pooling1d_9 (MaxPooling1 (None, 797, 8)            0         
_________________________________________________________________
batch_normalization_7 (Batch (None, 797, 8)            32        
_________________________________________________________________
conv1d_10 (Conv1D)           (None, 787, 16)           1424      
_________________________________________________________________
max_pooling1d_10 (MaxPooling (None, 197, 16)           0         
_________________________________________________________________
batch_normalization_8 (Batch (None, 197, 16)           64        
_________________________________________________________________
conv1d_11 (Conv1D)           (None, 187, 32)           5664      
_________________________________________________________________
max_pooling1d_11 (MaxPooling (None, 47, 32)            0         
_________________________________________________________________
batch_normalization_9 (Batch (None, 47, 32)            128       
_________________________________________________________________
conv1d_12 (Conv1D)           (None, 37, 64)            22592     
_________________________________________________________________
max_pooling1d_12 (MaxPooling (None, 9, 64)             0         
_________________________________________________________________
flatten_3 (Flatten)          (None, 576)               0         
_________________________________________________________________
dropout_5 (Dropout)          (None, 576)               0         
_________________________________________________________________
dense_7 (Dense)              (None, 64)                36928     
_________________________________________________________________
dropout_6 (Dropout)          (None, 64)                0         
_________________________________________________________________
dense_8 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_9 (Dense)              (None, 1)                 65        
=================================================================
Total params: 71,241
Trainable params: 71,129
Non-trainable params: 112
_________________________________________________________________
</code></pre></div></div>

<h2 id="evaluate-m3">Evaluate M3</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res_m3</span> <span class="o">=</span> <span class="n">computer</span><span class="p">.</span><span class="n">compute</span><span class="p">(</span><span class="n">X</span><span class="o">=</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y_test</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">m3</span><span class="p">,</span> <span class="n">hist</span><span class="o">=</span><span class="n">h3</span><span class="p">,</span> <span class="n">preds</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
               <span class="n">summary</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">report</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fusion</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
               <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span><span class="s">'Planet'</span><span class="p">],</span><span class="n">roc</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_105_0.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_105_1.png" alt="png" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------------------------------------------------------------
	CLASSIFICATION REPORT:
------------------------------------------------------------
              precision    recall  f1-score   support

         0.0       1.00      0.98      0.99       565
         1.0       0.29      1.00      0.45         5

    accuracy                           0.98       570
   macro avg       0.65      0.99      0.72       570
weighted avg       0.99      0.98      0.98       570
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_105_3.png" alt="png" /></p>

<p>It appears that increasing the learning rate did not help to improve the model’s performance. While it still identified all 5 planets, it misclassified 4 non-planets as planets, two more than model 2. Let’s see if we can decrease the False Positive Rate, while Maintaining the False Negative Rate at zero. We’ll go back to Model 2’s original learning rate of 3e-4, this time increasing the number of epochs instead.</p>

<h1 id="model-4"><code class="highlighter-rouge">MODEL 4</code></h1>

<h2 id="build-m4">Build M4</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#### MODEL 4
# decrease learning rate back to 3e-4
</span>
<span class="n">m4</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">build_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span> 
                     <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> 
                     <span class="n">strides</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="n">Adam</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">3e-4</span><span class="p">,</span> 
                     <span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BUILDING MODEL...
LAYER 1
LAYER 2
LAYER 3
LAYER 4
FULL CONNECTION
ADDING COST FUNCTION
COMPILED
</code></pre></div></div>

<h2 id="fit-m4">Fit M4</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># increase number of epochs to 33
</span>
<span class="n">h4</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">fit_cnn</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">m4</span><span class="p">,</span>
               <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">33</span><span class="p">,</span> 
               <span class="n">steps_per_epoch</span><span class="o">=</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="mi">32</span><span class="p">),</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FITTING MODEL...
Epoch 1/33
 - 17s - loss: 0.6739 - accuracy: 0.5931 - val_loss: 0.8185 - val_accuracy: 0.1211
Epoch 2/33
 - 18s - loss: 0.6006 - accuracy: 0.6777 - val_loss: 0.6971 - val_accuracy: 0.4772
Epoch 3/33
 - 20s - loss: 0.5806 - accuracy: 0.6989 - val_loss: 0.4942 - val_accuracy: 0.8281
Epoch 4/33
 - 19s - loss: 0.5300 - accuracy: 0.7412 - val_loss: 0.4063 - val_accuracy: 0.8439
Epoch 5/33
 - 18s - loss: 0.4974 - accuracy: 0.7620 - val_loss: 0.4653 - val_accuracy: 0.7614
Epoch 6/33
 - 18s - loss: 0.4563 - accuracy: 0.7907 - val_loss: 0.7816 - val_accuracy: 0.5632
Epoch 7/33
 - 18s - loss: 0.4144 - accuracy: 0.8239 - val_loss: 0.5558 - val_accuracy: 0.7140
Epoch 8/33
 - 18s - loss: 0.3503 - accuracy: 0.8561 - val_loss: 0.1770 - val_accuracy: 0.9228
Epoch 9/33
 - 19s - loss: 0.3230 - accuracy: 0.8636 - val_loss: 0.2454 - val_accuracy: 0.8807
Epoch 10/33
 - 18s - loss: 0.2673 - accuracy: 0.8984 - val_loss: 0.9147 - val_accuracy: 0.6526
Epoch 11/33
 - 18s - loss: 0.2434 - accuracy: 0.9091 - val_loss: 0.8955 - val_accuracy: 0.6228
Epoch 12/33
 - 18s - loss: 0.2401 - accuracy: 0.9119 - val_loss: 0.5549 - val_accuracy: 0.7474
Epoch 13/33
 - 17s - loss: 0.1985 - accuracy: 0.9227 - val_loss: 0.2674 - val_accuracy: 0.8860
Epoch 14/33
 - 19s - loss: 0.2019 - accuracy: 0.9255 - val_loss: 0.1316 - val_accuracy: 0.9439
Epoch 15/33
 - 17s - loss: 0.1642 - accuracy: 0.9416 - val_loss: 0.0758 - val_accuracy: 0.9702
Epoch 16/33
 - 17s - loss: 0.1833 - accuracy: 0.9331 - val_loss: 0.0558 - val_accuracy: 0.9860
Epoch 17/33
 - 17s - loss: 0.1506 - accuracy: 0.9476 - val_loss: 0.2535 - val_accuracy: 0.9035
Epoch 18/33
 - 17s - loss: 0.1445 - accuracy: 0.9501 - val_loss: 0.1732 - val_accuracy: 0.9368
Epoch 19/33
 - 17s - loss: 0.1302 - accuracy: 0.9558 - val_loss: 0.1816 - val_accuracy: 0.9474
Epoch 20/33
 - 17s - loss: 0.1176 - accuracy: 0.9586 - val_loss: 0.0928 - val_accuracy: 0.9737
Epoch 21/33
 - 17s - loss: 0.1099 - accuracy: 0.9653 - val_loss: 0.0820 - val_accuracy: 0.9754
Epoch 22/33
 - 17s - loss: 0.1263 - accuracy: 0.9552 - val_loss: 0.0566 - val_accuracy: 0.9825
Epoch 23/33
 - 18s - loss: 0.1067 - accuracy: 0.9628 - val_loss: 0.0553 - val_accuracy: 0.9877
Epoch 24/33
 - 19s - loss: 0.1192 - accuracy: 0.9605 - val_loss: 0.0911 - val_accuracy: 0.9649
Epoch 25/33
 - 17s - loss: 0.0929 - accuracy: 0.9675 - val_loss: 0.1150 - val_accuracy: 0.9632
Epoch 26/33
 - 18s - loss: 0.0912 - accuracy: 0.9688 - val_loss: 0.0455 - val_accuracy: 0.9895
Epoch 27/33
 - 19s - loss: 0.0942 - accuracy: 0.9672 - val_loss: 0.0470 - val_accuracy: 0.9877
Epoch 28/33
 - 18s - loss: 0.0875 - accuracy: 0.9700 - val_loss: 0.0856 - val_accuracy: 0.9737
Epoch 29/33
 - 18s - loss: 0.0784 - accuracy: 0.9713 - val_loss: 0.0888 - val_accuracy: 0.9754
Epoch 30/33
 - 18s - loss: 0.0860 - accuracy: 0.9706 - val_loss: 0.0523 - val_accuracy: 0.9895
Epoch 31/33
 - 18s - loss: 0.0967 - accuracy: 0.9694 - val_loss: 0.1047 - val_accuracy: 0.9649
Epoch 32/33
 - 18s - loss: 0.0722 - accuracy: 0.9757 - val_loss: 0.0571 - val_accuracy: 0.9825
Epoch 33/33
 - 17s - loss: 0.0965 - accuracy: 0.9678 - val_loss: 0.1138 - val_accuracy: 0.9596
TRAINING COMPLETE
Model: "sequential_5"
_________________________________________________________________
Layer (type)                 output Shape              Param #   
=================================================================
conv1d_17 (Conv1D)           (None, 3187, 8)           184       
_________________________________________________________________
max_pooling1d_17 (MaxPooling (None, 797, 8)            0         
_________________________________________________________________
batch_normalization_13 (Batc (None, 797, 8)            32        
_________________________________________________________________
conv1d_18 (Conv1D)           (None, 787, 16)           1424      
_________________________________________________________________
max_pooling1d_18 (MaxPooling (None, 197, 16)           0         
_________________________________________________________________
batch_normalization_14 (Batc (None, 197, 16)           64        
_________________________________________________________________
conv1d_19 (Conv1D)           (None, 187, 32)           5664      
_________________________________________________________________
max_pooling1d_19 (MaxPooling (None, 47, 32)            0         
_________________________________________________________________
batch_normalization_15 (Batc (None, 47, 32)            128       
_________________________________________________________________
conv1d_20 (Conv1D)           (None, 37, 64)            22592     
_________________________________________________________________
max_pooling1d_20 (MaxPooling (None, 9, 64)             0         
_________________________________________________________________
flatten_5 (Flatten)          (None, 576)               0         
_________________________________________________________________
dropout_9 (Dropout)          (None, 576)               0         
_________________________________________________________________
dense_13 (Dense)             (None, 64)                36928     
_________________________________________________________________
dropout_10 (Dropout)         (None, 64)                0         
_________________________________________________________________
dense_14 (Dense)             (None, 64)                4160      
_________________________________________________________________
dense_15 (Dense)             (None, 1)                 65        
=================================================================
Total params: 71,241
Trainable params: 71,129
Non-trainable params: 112
_________________________________________________________________
</code></pre></div></div>

<h2 id="evaluate-m4">Evaluate M4</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res_m4</span> <span class="o">=</span> <span class="n">computer</span><span class="p">.</span><span class="n">compute</span><span class="p">(</span><span class="n">X</span><span class="o">=</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y_test</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="n">m4</span><span class="p">,</span> <span class="n">hist</span><span class="o">=</span><span class="n">h4</span><span class="p">,</span> <span class="n">preds</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
               <span class="n">summary</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">report</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fusion</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
               <span class="n">classes</span><span class="o">=</span><span class="p">[</span><span class="s">'No Planet'</span><span class="p">,</span><span class="s">'Planet'</span><span class="p">],</span><span class="n">roc</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_113_0.png" alt="png" /></p>

<p><img src="./assets/images/starskope/output_113_1.png" alt="png" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------------------------------------------------------------
	CLASSIFICATION REPORT:
------------------------------------------------------------
              precision    recall  f1-score   support

         0.0       1.00      0.96      0.98       565
         1.0       0.18      1.00      0.30         5

    accuracy                           0.96       570
   macro avg       0.59      0.98      0.64       570
weighted avg       0.99      0.96      0.97       570
</code></pre></div></div>

<p><img src="./assets/images/starskope/output_113_3.png" alt="png" /></p>

<h1 id="interpret-results">Interpret Results</h1>

<h2 id="conclusion">Conclusion</h2>

<p>Above, we were able to identify with 99% accuracy 5 of 5 stars with an orbiting exoplanet (or exoplanets). The best model (MODEL 2) incorrectly predicted just 2 False Positives, with ZERO false negatives.</p>

<h2 id="save-weights-model-2">Save Weights (Model 2)</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># # %mkdir models
# m2.save_weights('models/k2_cnn1d.h5')
</span></code></pre></div></div>

<h1 id="recommendations">Recommendations</h1>

<p>While it is possible to create a near-perfect classification model for detecting exoplanets using the raw flux values of an imbalanced data set, the model would benefit from further validation using additional data from either K2 or another telescope such as TESS. One issue with this model is that it doesn’t reveal how it makes the decision on each prediction, an insight that would be extremely useful for astrophysicists and for developing and improving the model itself. A better, more robust and useful model, therefore, would be one which gives such insight without sacrificing accuracy or recall.</p>

<p>My recommendations are the following:</p>

<ol>
  <li>
    <p>Use datasets from the MAST website (via API) to incorporate other calculations of the star’s properties as features to be used for classification algorithms. Furthermore, attempt other types of transformations and normalizations on the data before running the model - for instance, apply Fourier transform and phase folding.</p>
  </li>
  <li>
    <p>Combine data from multiple campaigns and perhaps even multiple telescopes (for instance, matching sky coordinates and time intervals between K2, Kepler, and TESS for a batch of stars that have overlapping observations - this would be critical for finding transit periods that are longer than the campaigns of a single telecope’s observation period).</p>
  </li>
  <li>
    <p>Explore using computer vision on not only the Full Frame images we can collect from telescopes like TESS, but also on spectographs of the flux values themselves. The beauty of machine learning is our ability to rely on the computer to pick up very small nuances in differences that we ourselves cannot see with our own eyes.</p>
  </li>
  <li>
    <p>Explore using autoencoded machine learning algorithms with Restricted Boltzmann Machines - this type of model has proven to be incredibly effective in the image analysis of handwriting as we’ve seen applied the MNIST dataset - let’s find out if the same is true for images of stars, be they the Full Frame Images or spectographs.</p>
  </li>
</ol>

<h1 id="future-work">Future Work</h1>

<p>To continue this project, I’ll take another approach for detecting exoplanets using computer vision to analyze images of spectographs of this same star flux data set. In part II (notebook <code class="highlighter-rouge">[starskøpe-2]</code>) I use Restricted Boltzmann Machines on Fourier-transformed spectograph images of the Flux data for K2. These are then stacked on top of each other as layers in a Deep Boltzmann Machine neural network. In part III (notebook <code class="highlighter-rouge">[starskøpe-3]</code>) I will apply a similar technique using data from TESS.</p>

<p>For triage/vetting purposes, this model could be useful for scientists. However, I would like to extend the model’s capability using a multiclassification algorithm that can tell us not only if there is a transiting body, but how many, as well as additional information about the star’s properties. The latter could be done by training another model on stellar parameters, and then stacking the two together into one neural network.</p>
:ET